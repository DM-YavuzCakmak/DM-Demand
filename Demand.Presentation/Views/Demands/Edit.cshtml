@using Demand.Domain.ViewModels
@using System.Security.Claims
@using Newtonsoft.Json

@model DemandViewModel

@{
    var claimsIdentity = (ClaimsIdentity)User.Identity;
    var claims = claimsIdentity.Claims;
    var userId = long.Parse(claims.FirstOrDefault(x => x.Type == "UserId").Value);
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="~/css/index.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <style>
        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            flex-direction: column;
        }

        main {
            margin-top: 20px;
            width: 95%;
            max-width: 1200px;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        #siteform {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            width: calc(48% - 10px);
            margin-bottom: 10px;
        }


        .button-group {
            display: flex;
            margin-top: 20px;
        }

        .form-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .form-group {
            width: 48%;
            margin-bottom: 10px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                color: white;
            }

            .form-group select,
            .form-group input[type="text"],
            .form-group textarea {
                width: 100%;
                padding: 8px;
                box-sizing: border-box;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

        .update-button {
            background-color: #5cb85c;
            color: #fff;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .update-button:hover {
                background-color: #4cae4c;
            }


        .decline-button {
            background-color: red;
            color: #fff;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .decline-button:hover {
            background-color: red;
            }
        #description {
            height: 125px;
            width: 100%;
            resize: none;
        }

        #requestDate {
            background-color: lightgray;
            pointer-events: none;
        }

        #requirementDate {
            background-color: lightgray;
            pointer-events: none;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        input[type="text"] {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }

        #addButton, #removeButton {
            margin-top: 10px;
            background-color: #5cb85c;
            color: #fff;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #addButton:hover, #removeButton:hover {
                background-color: #45a049;
            }
             .header {
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            color: white;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
        }

    </style>
</head>

<body>
    <div class="header">
        <div class="logo">
            <a href="@Url.Action("Index", "Home")">
                <img id="logo" src="~/images/dem_logo.png" alt="Logo">
            </a>
        </div>
    </div>

    <div style="margin-top:75px;">
        <h2 style="color:white">TEKLİF GİRİŞİ</h2>
    </div>
    <form id="siteform" enctype="multipart/form-data">
        <div class="form-row">
            <div class="form-group">
                <label for="companyName">Şirket Adı:</label>
                <select id="companyName" name="companyName">
                    @foreach (var company in ViewBag.Companies)
                    {
                        if (Model.CompanyId == company.Id)
                        {
                            <option value="@company.Id" selected>@company.Name</option>
                        }
                        else
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="location">Lokasyon:</label>
                <select id="location" name="location">
                    @foreach (var location in ViewBag.Locations)
                    {

                        if (Model.CompanyLocationId == location.Id)
                        {
                            <option value="@location.Id" selected>@location.Name</option>
                        }
                        else
                        {
                            <option value="@location.Id">@location.Name</option>
                        }
                    }
                    <input type="hidden" id="locationId" name="locationId" value="@Model.CompanyLocationId" />
                </select>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="requestDate">Talep Tarihi:</label>
                <input type="text" id="requestDate" name="requestDate" value="@Model.CreatedDate.Value.ToShortDateString()" readonly>
            </div>

            <div class="form-group">
                <label for="requirementDate">Gereklilik Tarihi:</label>
                <input type="text" id="requirementDate" name="requirementDate" value="@Model.RequirementDate.Value.ToShortDateString()" readonly>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group">
                <label for="department">Departman:</label>
                <select id="department" name="department">
                    @foreach (var department in ViewBag.Departments)
                    {
                        if (Model.DepartmentId == department.Id)
                        {
                            <option value="@department.Id" selected>@department.Name</option>
                        }
                        else
                        {
                            <option value="@department.Id">@department.Name</option>

                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="description"> Açıklama:</label>
                <textarea id="description" name="description">@Model.Description</textarea>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <h2 style="color:white">Birim Yöneticisi Not/Gerekçe : @Model.Description</h2>
            </div>
        </div>

        @if ((userId == 10 || userId == 57) && Model.isOppenOffer == true)
        {
            <div class="faq_main_container">
                <div class="faq_container">
                    <div class="offer">
                        <div class="offer-text">
                            <h4 style="color:white;">TEKLİF 1</h4>
                        </div>
                        <div class="icon">
                            <div class="icon-shape"></div>
                        </div>
                    </div>
                    <div class="offercont">
                        <div class="offerAcordion">
                            <div class="form-group">
                                <label for="provider">Kayıtlı Sağlayıcı:</label>
                                <select id="provider" name="provider" style="width:200px">
                                    @if (Model.DemandOffers.Count != 0 && Model.DemandOffers.Any())
                                    {
                                        <option value="@Model.DemandOffers[0].SupplierId">@Model.DemandOffers[0].SupplierName</option>
                                    }
                                    else
                                    {
                                        <option selected> Bir sağlayıcı seçiniz.</option>
                                        @foreach (var providers in ViewBag.Providers)
                                        {
                                            <option value="@providers.Id">@providers.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <input type="checkbox" id="notRegisteredProvider1" name="notRegisteredProvider1">
                            <label for="notRegisteredProvider1" style="color:white">Kayıtlı Sağlayıcı Değil</label>
                            <br /><br />
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCompanyName1">Firma Adı:</label>
                                    @if (Model.DemandOffers.Count != 0 && Model?.DemandOffers?[0].SupplierName != null)
                                    {
                                        <input type="text" id="offerCompanyName1" name="offerCompanyName1" value="@Model?.DemandOffers?[0].SupplierName" />
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyName1" name="offerCompanyName1">

                                    }

                                </div>

                                <div class="form-group">
                                    <label for="offerCompanyPhone1">Firma Telefon Numarası:</label>
                                    @if (Model.DemandOffers.Count != 0 && Model?.DemandOffers?[0].SupplierPhone != null)
                                    {
                                        <input type="text" id="offerCompanyPhone1" name="offerCompanyPhone1" value="@Model?.DemandOffers?[0].SupplierPhone">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyPhone1" name="offerCompanyPhone1">
                                    }
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCompanyAddress1">Firma Adres:</label>
                                    @if (Model.DemandOffers.Count != 0 && @Model?.DemandOffers?[0].SupplierAdress != null)
                                    {
                                        <input type="text" id="offerCompanyAddress1" name="offerCompanyAddress1" value="@Model?.DemandOffers?[0].SupplierAdress">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyAddress1" name="offerCompanyAddress1">
                                    }
                                </div>
                                <div class="form-group">
                                    <label for="deadlineDate1">Termin Tarihi: </label>
                                    <input type="date" id="deadlineDate1" name="deadlineDate1"
                                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                           value="@(Model.DemandOffers.Count != 0 && Model.DemandOffers[0].DeadlineDate.HasValue ? Model.DemandOffers[0].DeadlineDate.Value.ToString("yyyy-MM-dd") : "")">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCurrencyType1">Para Birimi:</label>
                                    <select id="offerCurrencyType1" name="offerCurrencyType1">
                                        @foreach (var currencyType in ViewBag.CurrencyTypes)
                                        {
                                            if (Model.CurrencyTypeId == currencyType.Id)
                                            {
                                                <option value="@currencyType.Id" selected>@currencyType.CurrencyType</option>
                                            }
                                            else
                                            {
                                                <option value="@currencyType.Id">@currencyType.CurrencyType</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="form-group" id="exchangeRateTextbox1" style="display: none;">
                                    <label for="exchangeRate1">Dolar/Euro Kuru:</label>
                                    <input type="text" id="exchangeRate1" name="exchangeRate1">
                                </div>
                            </div>
                            <div class="form-row">

                                <div class="form-group">
                                    <label for="maturityDate1">Ödeme Tarihi: </label>
                                    <input type="date" id="maturityDate1" name="maturityDate1"
                                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                           value="@(Model.DemandOffers.Count != 0 && Model.DemandOffers[0].MaturityDate.HasValue ? Model.DemandOffers[0].MaturityDate.Value.ToString("yyyy-MM-dd") : "")">
                                </div>

                                <div class="form-group">
                                    <label for="offerTotalPrice1">Toplam Fiyat :</label>
                                    <input type="text" id="offerTotalPrice1" name="offerTotalPrice1" readonly value="@(Model.DemandOffers.Count > 0 ? Model?.DemandOffers?[0].TotalPrice : 0)">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label>Ödeme Türü:</label>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="cash1" name="paymentType1" value="1" checked onclick="togglePaymentOptions(1)">
                                        <label for="cash1">Peşin</label>
                                    </div>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="installment1" name="paymentType1" value="2" onclick="togglePaymentOptions(1)">
                                        <label for="installment1">Vadeli</label>
                                    </div>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="partial1" name="paymentType1" value="3" onclick="togglePaymentOptions(1)">
                                        <label for="partial1">Parçalı</label>
                                    </div>
                                </div>

                                <div class="form-group" id="maturitySelectContainer1" style="display: none;">
                                    <label for="maturitySelect1">Vade Süresi:</label>
                                    <select id="maturitySelect1" name="maturityPeriod">
                                        <option value="">Seçiniz</option>
                                        <option value="1">15 Gün</option>
                                        <option value="2">30 Gün</option>
                                        <option value="3">60 Gün</option>
                                        <option value="4">90 Gün</option>
                                    </select>
                                </div>

                                <div class="form-group" id="partialSelectContainer1" style="display: none;">
                                    <label for="partialSelect1">Parçalı Vade:</label>
                                    <select id="partialSelect1" name="partialPeriod">
                                        <option value="">Seçiniz</option>
                                        <option value="1">%20 Peşin - İşbitimi</option>
                                        <option value="2">%30 Peşin - İşbitimi</option>
                                        <option value="3">%50 Peşin - İşbitimi</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="description1">Dosya Seç:</label>
                                <div class="fancy-file-input">
                                    <input type="file" id="fileInput1" name="fileInput1" multiple accept=".png, .jpeg, .pdf" onchange="showFileName(1)" />
                                    <span onclick="triggerFileInput(1)">Dosya Seçin</span>
                                </div>
                                <div id="selectedFileName1" class="selected-file-name"></div>
                            </div>

                            <button onclick="validateAndSubmit(1)" type="button" class="update-button">Kaydet</button>

                            @if (Model.DemandOffers.Count > 0)
                            {
                                <a href="@Url.Action("OfferPage", "Demands", new { DemandId = @Model.DemandId, DemandOfferId = @Model?.DemandOffers?[0].DemandOfferId })" class="edit-button">Teklif Detay Giriş</a>
                            }

                        </div>
                    </div>
                </div>
            </div>

            <div class="faq_main_container">
                <div class="faq_container">
                    <div class="offer">
                        <div class="offer-text">
                            <h4 style="color:white;">TEKLİF 2</h4>
                        </div>
                        <div class="icon">
                            <div class="icon-shape"></div>
                        </div>
                    </div>
                    <div class="offercont">
                        <div class="offerAcordion">
                            <div class="form-group">
                                <label for="provider2">Kayıtlı Sağlayıcı:</label>
                                <select id="provider2" name="provider2" style="width:200px">
                                    @if (Model.DemandOffers.Count > 1 && Model.DemandOffers.Any())
                                    {
                                        <option value="@Model.DemandOffers[1].SupplierId">@Model.DemandOffers[1].SupplierName</option>
                                    }
                                    else
                                    {
                                        <option selected> Bir sağlayıcı seçiniz.</option>
                                        @foreach (var providers in ViewBag.Providers)
                                        {
                                            <option value="@providers.Id">@providers.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <input type="checkbox" id="notRegisteredProvider2" name="notRegisteredProvider2">
                            <label for="notRegisteredProvider2" style="color:white">Kayıtlı Sağlayıcı Değil</label>
                            <br /><br />
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCompanyName2">Firma Adı:</label>
                                    @if (Model.DemandOffers.Count > 1 && Model?.DemandOffers?[1].CompanyName != null)
                                    {
                                        <input type="text" id="offerCompanyName2" name="offerCompanyName2" value="@Model?.DemandOffers?[1].CompanyName">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyName2" name="offerCompanyName2">
                                    }
                                </div>
                                <div class="form-group">
                                    <label for="offerCompanyPhone2">Firma Telefon Numarası:</label>
                                    @if (Model.DemandOffers.Count > 1 && Model?.DemandOffers?[1].SupplierPhone != null)
                                    {
                                        <input type="text" id="offerCompanyPhone2" name="offerCompanyPhone2" value="@Model?.DemandOffers?[1].SupplierPhone">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyPhone2" name="offerCompanyPhone2">
                                    }

                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCompanyAddress2">Firma Address:</label>
                                    @if (Model.DemandOffers.Count > 1 && Model?.DemandOffers?[1].CompanyAddress != null)
                                    {
                                        <input type="text" id="offerCompanyAddress2" name="offerCompanyAddress2" value="@Model?.DemandOffers?[1].CompanyAddress">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyAddress2" name="offerCompanyAddress2">
                                    }
                                </div>

                                <div class="form-group">
                                    <label for="deadlineDate2">Termin Tarihi: </label>
                                    <input type="date" id="deadlineDate2" name="deadlineDate2"
                                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                           value="@(Model.DemandOffers.Count > 1 && Model.DemandOffers[1].DeadlineDate.HasValue
                                            ? Model.DemandOffers[1].DeadlineDate.Value.ToString("yyyy-MM-dd")
                                            : DateTime.Now.ToString("yyyy-MM-dd"))">
                                </div>

                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCurrencyType2">Para Birimi:</label>
                                    <select id="offerCurrencyType2" name="offerCurrencyType2">
                                        @foreach (var currencyType in ViewBag.CurrencyTypes)
                                        {
                                            if (Model.CurrencyTypeId == currencyType.Id)
                                            {
                                                <option value="@currencyType.Id" selected>@currencyType.CurrencyType</option>
                                            }
                                            else
                                            {
                                                <option value="@currencyType.Id">@currencyType.CurrencyType</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="form-group" id="exchangeRateTextbox2" style="display: none;">
                                    <label for="exchangeRate2">Dolar/Euro Kuru:</label>
                                    <input type="text" id="exchangeRate2" name="exchangeRate2">
                                </div>
                            </div>

                            <div class="form-row">

                                <div class="form-group">
                                    <label for="maturityDate2">Ödeme Tarihi: </label>
                                    <input type="date" id="maturityDate2" name="maturityDate2"
                                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                           value="@(Model.DemandOffers.Count >1 && Model.DemandOffers[1].MaturityDate.HasValue ? Model.DemandOffers[1].MaturityDate.Value.ToString("yyyy-MM-dd") : "")">
                                </div>

                                <div class="form-group">
                                    <label for="offerTotalPrice2">Toplam Fiyat :</label>
                                    <input type="text" id="offerTotalPrice2" readonly name="offerTotalPrice2" value="@(Model.DemandOffers.Count > 1 ? Model?.DemandOffers?[1].TotalPrice : 0)">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label>Ödeme Türü:</label>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="cash2" name="paymentType2" value="1" checked onclick="togglePaymentOptions(2)">
                                        <label for="cash2">Peşin</label>
                                    </div>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="installment2" name="paymentType2" value="2" onclick="togglePaymentOptions(2)">
                                        <label for="installment2">Vadeli</label>
                                    </div>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="partial2" name="paymentType2" value="3" onclick="togglePaymentOptions(2)">
                                        <label for="partial2">Parça</label>
                                    </div>
                                </div>
                                <div class="form-group" id="maturitySelectContainer2" style="display: none;">
                                    <label for="maturitySelect2">Vade Süresi:</label>
                                    <select id="maturitySelect2" name="maturityPeriod2">
                                        <option value="">Seçiniz</option>
                                        <option value="15">15 Gün</option>
                                        <option value="30">30 Gün</option>
                                        <option value="45">45 Gün</option>
                                        <option value="60">60 Gün</option>
                                    </select>
                                </div>
                                <div class="form-group" id="partialSelectContainer2" style="display: none;">
                                    <label for="partialSelect2">Parça Numarası:</label>
                                    <select id="partialSelect2" name="partialPeriod2">
                                        <option value="">Seçiniz</option>
                                        <option value="20">%20 Peşin - İşbitimi</option>
                                        <option value="30">%30 Peşin - İşbitimi</option>
                                        <option value="50">%50 Peşin - İşbitimi</option>
                                    </select>
                                </div>
                            </div>


                            <div class="form-group">
                                <label for="description2">Dosya Seç:</label>
                                <div class="fancy-file-input">
                                    <input type="file" id="fileInput2" name="fileInput2" multiple accept=".png, .jpeg, .pdf" onchange="showFileName(2)" />
                                    <span onclick="triggerFileInput(2)">Dosya Seçin</span>
                                </div>
                                <div id="selectedFileName2" class="selected-file-name"></div>
                            </div>

                            <button onclick="validateAndSubmit(2)" type="button" class="update-button">Kaydet</button>

                            @if (Model.DemandOffers.Count > 1)
                            {
                                <a href="@Url.Action("OfferPage", "Demands", new { DemandId = @Model.DemandId, DemandOfferId = @Model?.DemandOffers?[1].DemandOfferId })" class="edit-button">Teklif Detay Giriş</a>
                            }


                        </div>
                    </div>
                </div>
            </div>
            <div class="faq_main_container">
                <div class="faq_container">
                    <div class="offer">
                        <div class="offer-text">
                            <h4 style="color:white;">TEKLİF 3</h4>
                        </div>
                        <div class="icon">
                            <div class="icon-shape"></div>
                        </div>
                    </div>
                    <div class="offercont">
                        <div class="offerAcordion">
                            <div class="form-group">
                                <label for="provider3">Kayıtlı Sağlayıcı:</label>
                                <select id="provider3" name="provider3" style="width:200px">
                                    @if (Model.DemandOffers.Count > 2 && Model.DemandOffers.Any())
                                    {
                                        <option value="@Model.DemandOffers[2].SupplierId">@Model.DemandOffers[2].SupplierName</option>
                                    }
                                    else
                                    {
                                        <option selected> Bir sağlayıcı seçiniz.</option>
                                        @foreach (var providers in ViewBag.Providers)
                                        {
                                            <option value="@providers.Id">@providers.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <input type="checkbox" id="notRegisteredProvider3" name="notRegisteredProvider3">
                            <label for="notRegisteredProvider3" style="color:white">Kayıtlı Sağlayıcı Değil</label>
                            <br /><br />
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCompanyName3">Firma Adı:</label>
                                    @if (Model.DemandOffers.Count > 2 && Model?.DemandOffers?[2].SupplierName != null)
                                    {
                                        <input type="text" id="offerCompanyName3" name="offerCompanyName3" value="@Model?.DemandOffers?[2].SupplierName">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyName3" name="offerCompanyName3">
                                    }
                                </div>

                                <div class="form-group">
                                    <label for="offerCompanyPhone3">Firma Telefon Numarası:</label>
                                    @if (Model.DemandOffers.Count > 2 && Model?.DemandOffers?[2].SupplierPhone != null)
                                    {
                                        <input type="text" id="offerCompanyPhone3" name="offerCompanyPhone3" value="@Model?.DemandOffers?[2].SupplierPhone">

                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyPhone3" name="offerCompanyPhone3">
                                    }
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCompanyAddress3">Firma Address:</label>
                                    @if (Model.DemandOffers.Count > 2 && Model?.DemandOffers?[2].CompanyAddress != null)
                                    {
                                        <input type="text" id="offerCompanyAddress3" name="offerCompanyAddress3" value="@Model?.DemandOffers?[2].CompanyAddress">
                                    }
                                    else
                                    {
                                        <input type="text" id="offerCompanyAddress3" name="offerCompanyAddress3">
                                    }
                                </div>
                                <div class="form-group">
                                    <label for="deadlineDate3">Termin Tarihi: </label>
                                    <input type="date" id="deadlineDate3" name="deadlineDate3"
                                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                           value="@(Model.DemandOffers.Count > 2 && Model.DemandOffers[2].DeadlineDate.HasValue
                                            ? Model.DemandOffers[2].DeadlineDate.Value.ToString("yyyy-MM-dd")
                                            : DateTime.Now.ToString("yyyy-MM-dd"))">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerCurrencyType3">Para Birimi:</label>
                                    <select id="offerCurrencyType3" name="offerCurrencyType3">
                                        @foreach (var currencyType in ViewBag.CurrencyTypes)
                                        {
                                            if (Model.CurrencyTypeId == currencyType.Id)
                                            {
                                                <option value="@currencyType.Id" selected>@currencyType.CurrencyType</option>
                                            }
                                            else
                                            {
                                                <option value="@currencyType.Id">@currencyType.CurrencyType</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="form-group" id="exchangeRateTextbox3" style="display: none;">
                                    <label for="exchangeRate3">Dolar/Euro Kuru:</label>
                                    <input type="text" id="exchangeRate3" name="exchangeRate3">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="maturityDate3">Ödeme Tarihi: </label>
                                    <input type="date" id="maturityDate3" name="maturityDate3"
                                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                           value="@(Model.DemandOffers.Count >2  && Model.DemandOffers[2].MaturityDate.HasValue ? Model.DemandOffers[2].MaturityDate.Value.ToString("yyyy-MM-dd") : "")">
                                </div>
                                <div class="form-group">
                                    <label for="offerTotalPrice3">Toplam Fiyat :</label>
                                    <input type="text" id="offerTotalPrice3" readonly name="offerTotalPrice3" value="@(Model.DemandOffers.Count > 2 ? Model?.DemandOffers?[2].TotalPrice : 0)">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label>Ödeme Türü:</label>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="cash3" name="paymentType3" value="1" checked onclick="togglePaymentOptions(3)">
                                        <label for="cash3">Peşin</label>
                                    </div>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="installment3" name="paymentType3" value="2" onclick="togglePaymentOptions(3)">
                                        <label for="installment3">Vadeli</label>
                                    </div>
                                    <div style="display: inline-block; margin-left: 10px;">
                                        <input type="radio" id="partial3" name="paymentType3" value="3" onclick="togglePaymentOptions(3)">
                                        <label for="partial3">Parça</label>
                                    </div>
                                </div>
                                <div class="form-group" id="maturitySelectContainer3" style="display: none;">
                                    <label for="maturitySelect3">Vade Süresi:</label>
                                    <select id="maturitySelect3" name="maturityPeriod3">
                                        <option value="">Seçiniz</option>
                                        <option value="15">15 Gün</option>
                                        <option value="30">30 Gün</option>
                                        <option value="45">45 Gün</option>
                                        <option value="60">60 Gün</option>
                                    </select>
                                </div>
                                <div class="form-group" id="partialSelectContainer3" style="display: none;">
                                    <label for="partialSelect3">Parçalı Vade:</label>
                                    <select id="partialSelect3" name="partialPeriod3">
                                        <option value="">Seçiniz</option>
                                        <option value="20">%20 Peşin - Ödemem</option>
                                        <option value="30">%30 Peşin - Ödemem</option>
                                        <option value="50">%50 Peşin - Ödemem</option>
                                    </select>
                                </div>
                            </div>


                            <div class="form-group">
                                <label for="description3">Dosya Seç:</label>
                                <div class="fancy-file-input">
                                    <input type="file" id="fileInput3" name="fileInput3" multiple accept=".png, .jpeg, .pdf" onchange="showFileName(3)" />
                                    <span onclick="triggerFileInput(3)">Dosya Seçin</span>
                                </div>
                                <div id="selectedFileName3" class="selected-file-name"></div>
                            </div>
                            <button onclick="validateAndSubmit(3)" type="button" class="update-button">Kaydet</button>
                            @if (Model.DemandOffers.Count > 2)
                            {
                                <a href="@Url.Action("OfferPage", "Demands", new { DemandId = @Model.DemandId, DemandOfferId = @Model?.DemandOffers?[2].DemandOfferId })" class="edit-button">Teklif Detay Giriş</a>
                            }

                        </div>
                    </div>
                </div>
            </div>
            <div class="button-group" style="display: flex; align-items: center; gap: 10px;">
                <input type="text" id="descriptionInput" placeholder="Açıklama giriniz..."
                       style="padding: 8px; border: 1px solid #ccc; border-radius: 8px; outline: none; width: 550px;">
                <button onclick="declineChangeStatus(@Model.DemandId)" type="button" class="decline-button">Geri Döndür</button>
            </div>
            @if (ViewBag.OfferRequest != null)
            {
                <div class="button-group">
                    <button onclick="changeStatus(@Model.DemandId)" type="button" class="update-button">Teklifleri Gönder</button>

                </div>
            }
           

        }
    </form>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
@{
    var jsonProviders = JsonConvert.SerializeObject(ViewBag.Providers);
}
<style>

    #overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }


    .faq_container {
        border-bottom: 2px solid #ddd;
    }

    .offer {
        font-size: 1.2rem;
        font-weight: 600;
        padding: 10px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
        cursor: pointer;
    }

    .offercont {
        max-height: 0;
        overflow: hidden;
        transition: 0.3s;
    }

    .offerAcordion {
        padding: 0 10px 20px;
        line-height: 1.5rem;
        max-height: 500px;
        overflow-y: auto;
    }

    .fqa_headline_container h2 span {
        font-weight: 700;
    }

    .offer-text h3 {
        font-size: 22px;
    }

    .icon.active {
        background: transparent;
        border: 2px solid #fff;
    }

    .icon:hover {
        cursor: pointer;
    }

    .icon-shape {
        position: relative;
        width: 50px;
        height: 50px;
    }

    .icon .icon-shape::before {
        position: absolute;
        content: "";
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 30px;
        height: 4px;
        background: #fff;
        border-radius: 3px;
        transition: all 0.5s ease;
    }

    .icon .icon-shape::after {
        position: absolute;
        content: "";
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 4px;
        height: 30px;
        background: #fff;
        border-radius: 3px;
        transition: all 0.5s ease;
    }

    .icon .icon-shape.active::before {
        transform: translate(-50%, -50%) rotate(180deg);
        transition: all 0.5s ease;
    }

    .icon .icon-shape.active::after {
        transform: translate(-50%, -50%) rotate(90deg);
        transition: all 0.5s ease;
    }

    .fancy-file-input {
        position: relative;
        display: inline-block;
        width: 200px;
        padding: 10px;
        background-color: #007BFF;
        color: white;
        border-radius: 5px;
        text-align: center;
        cursor: pointer;
        font-size: 14px;
    }

        .fancy-file-input input[type="file"] {
            display: none;
        }

        .fancy-file-input:hover {
            background-color: #0056b3;
        }

        .fancy-file-input span {
            display: block;
            font-size: 16px;
        }

        .fancy-file-input input[type="file"]:focus + span {
            outline: none;
        }

        .fancy-file-input label {
            font-size: 14px;
            color: white;
        }

    .edit-button {
        background-color: #ff9933;
        color: #fff;
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
    }

        .edit-button:hover {
            background-color: orange;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .form-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .button-group {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    #description {
        height: 125px;
        width: 550px;
        resize: none;
    }

    #sendButton {
        background-color: #4CAF50;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .form-row .currency-textbox {
        position: absolute;
        top: 0;
    }

    .form-group {
        width: calc(50% - 10px);
        margin-bottom: 10px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group select,
        .form-group input[type="text"],
        .form-group textarea {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    input[type="date"] {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: white;
        color: #333;
        font-family: inherit;
        font-size: inherit;
    }

    .file-group input[type="file"] {
        display: none;
    }

    .file-group label {
        background-color: #27ae60;
        color: #fff;
        font-weight: bold;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: inline-block;
    }

        .file-group label:hover {
            background-color: #218c53;
        }

    .file-group .file-name {
        margin-top: 10px;
        display: inline-block;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        max-width: 200px;
    }

    .file-group input[type="file"]:focus + label,
    .file-group input[type="file"]:not(:focus) + label {
        background-color: #27ae60;
    }

        .file-group input[type="file"]:focus + label:hover,
        .file-group input[type="file"]:not(:focus) + label:hover {
            background-color: #218c53;
        }

    .file-group input[type="file"] {
        opacity: 0;
        position: absolute;
        z-index: -1;
    }

        .file-group input[type="file"]:focus + label .file-name,
        .file-group input[type="file"]:not(:focus) + label .file-name {
            display: inline-block;
        }

        .file-group input[type="file"]:focus + label:before,
        .file-group input[type="file"]:not(:focus) + label:before {
            content: "Select File";
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

    .form-group.file-group {
        width: calc(33.3333% - 10px);
    }

    .selected-file-name {
        margin-left: 10px; /* Sola kaydırmak için */
        color: white; /* Metni beyaz yapmak için */
        font-size: 14px; /* İsteğe bağlı, font boyutunu ayarlayabilirsiniz */
    }
</style>

<script>
    let offers = document.querySelectorAll(".offer");
    var providers = @Html.Raw(jsonProviders);

    offers.forEach((offers) => {
        let icon = offers.querySelector(".icon-shape");

        offers.addEventListener("click", (event) => {
            const active = document.querySelector(".offer.active");
            const activeIcon = document.querySelector(".icon-shape.active");

            if (active && active !== offers) {
                active.classList.toggle("active");
                activeIcon.classList.toggle("active");
                active.nextElementSibling.style.maxHeight = 0;
            }

            offers.classList.toggle("active");
            icon.classList.toggle("active");

            const answer = offers.nextElementSibling;

            if (offers.classList.contains("active")) {
                answer.style.maxHeight = answer.scrollHeight + "px";
            } else {
                answer.style.maxHeight = 0;
            }
        });
    });
    $(document).ready(function () {
        $('#requestDate').prop('readonly', true);
        $('#description').prop('readonly', true);
        $('#companyName').prop('disabled', true);
        $('#location').prop('disabled', true);
        $('#department').prop('disabled', true);
        $('#requirementDate').prop('disabled', true);

        var demandId = @Model.DemandId;
        var companyNameFields = [
            $('#offerCompanyName1'),
            $('#offerCompanyName2'),
            $('#offerCompanyName3')
        ];

        var offerEntryButtons = [
            $('#offerEntryButton1'),
            $('#offerEntryButton2'),
            $('#offerEntryButton3')
        ];

        companyNameFields.forEach(function (companyNameField, index) {
            if (companyNameField.val() !== "") {
                offerEntryButtons[index].show();
            } else {
                offerEntryButtons[index].hide();
            }
        });



        offerEntryButtons.forEach(function (button, index) {
            button.click(function () {
                openOfferPage(index + 1);
            });
        });


        $('#provider').change(function () {
            var selectedProviderId = $(this).val();
            if (selectedProviderId !== "") {
                var selectedProvider = providers.find(p => p.Id == parseInt(selectedProviderId));
                if (selectedProvider) {
                    $('#offerCompanyName1').val(selectedProvider.Name);
                    $('#offerCompanyPhone1').val(selectedProvider.PhoneNumber);
                    $('#offerCompanyAddress1').val(selectedProvider.Address);

                }
            }
        });
        $('#provider2').change(function () {
            var selectedProviderId = $(this).val();
            if (selectedProviderId !== "") {
                var selectedProvider = providers.find(p => p.Id == parseInt(selectedProviderId));
                if (selectedProvider) {
                    $('#offerCompanyName2').val(selectedProvider.Name);
                    $('#offerCompanyPhone2').val(selectedProvider.PhoneNumber);
                    $('#offerCompanyAddress2').val(selectedProvider.Address);

                }
            }
        });
        $('#provider3').change(function () {
            var selectedProviderId = $(this).val();
            if (selectedProviderId !== "") {
                var selectedProvider = providers.find(p => p.Id == parseInt(selectedProviderId));
                if (selectedProvider) {
                    $('#offerCompanyName3').val(selectedProvider.Name);
                    $('#offerCompanyPhone3').val(selectedProvider.PhoneNumber);
                    $('#offerCompanyAddress3').val(selectedProvider.Address);

                }
            }
        });
        $('#offerCurrencyType1').change(function () {
            var currencyType = $(this).val();
            if (currencyType == 2 || currencyType == 3) {
                $('#exchangeRateTextbox1').show();
            } else {
                $('#exchangeRateTextbox1').hide();
            }
        });
        $('#offerCurrencyType2').change(function () {
            var currencyType = $(this).val();
            if (currencyType == 2 || currencyType == 3) {
                $('#exchangeRateTextbox2').show();
            } else {
                $('#exchangeRateTextbox2').hide();
            }
        });
        $('#offerCurrencyType3').change(function () {
            var currencyType = $(this).val();
            if (currencyType == 2 || currencyType == 3) {
                $('#exchangeRateTextbox3').show();
            } else {
                $('#exchangeRateTextbox3').hide();
            }
        });
        $('#exchangeRate1').on('input', function () {
            updateTotalPrice();
        });
        $('#offerAmount1, #offerPrice1').on('input', function () {
            updateTotalPrice();
        });
        $('#offerAmount2, #offerPrice2').on('input', function () {
            updateTotalPrice2(2);
        });
        $('#offerAmount3, #offerPrice3').on('input', function () {
            updateTotalPrice2(3);
        });
        $('#companyName').change(function () {
            var selectedCompanyId = $(this).val();
            $.ajax({
                url: 'api/CompanyLocations/GetLocations?companyId=' + selectedCompanyId,
                type: 'GET',
                success: function (data) {
                    $('#location').empty();
                    $.each(data.data, function (index, item) {
                        $('#location').append($('<option>', {
                            value: item.id,
                            text: item.name
                        }));
                    });
                },
                error: function (error) {
                    console.error('Error fetching locations:', error);
                }
            });
        });

          $("#logo").click(function () {
            window.location.href = "@Url.Action("Index", "Home")";
        });
    });

    function triggerFileInput(offerId) {
        document.getElementById('fileInput' + offerId).click();
    }

    function showFileName(offerId) {
        var fileInput = document.getElementById('fileInput' + offerId);
        var fileName = fileInput.files[0] ? fileInput.files[0].name : '';
        document.getElementById('selectedFileName' + offerId).textContent = fileName;
    }

    function togglePaymentOptions(group) {
        var maturitySelectContainer = document.getElementById("maturitySelectContainer" + group);
        var partialSelectContainer = document.getElementById("partialSelectContainer" + group);
        var isInstallment = document.getElementById("installment" + group).checked;
        var isPartial = document.getElementById("partial" + group).checked;
        var isCash = document.getElementById("cash" + group).checked;

        maturitySelectContainer.style.display = "none";
        partialSelectContainer.style.display = "none";

        if (isInstallment) {
            maturitySelectContainer.style.display = "block";
        } else if (isPartial) {
            partialSelectContainer.style.display = "block";
        }

        if (isCash) {
            document.getElementById("maturitySelect" + group).value = "";
            document.getElementById("partialSelect" + group).value = "";
        } else if (isInstallment) {
            document.getElementById("partialSelect" + group).value = "";
        } else if (isPartial) {
            document.getElementById("maturitySelect" + group).value = "";
        }
    }
    function openOfferPage(demandId, offerNumber) {
        window.location.href = '/api/Demands/OfferPage?demandId=' + demandId + '&DemandOfferId=' + offerNumber;
    }
    function updateTotalPrice() {
        var amount = parseFloat($('#offerAmount1').val()) || 0;
        var price = parseFloat($('#offerPrice1').val()) || 0;
        var exchangeRate = parseFloat($('#exchangeRate1').val().replace(',', '.')) || 1;

        if ($('#offerCurrencyType1').val() == 2 || $('#offerCurrencyType1').val() == 3) {
            price = price * exchangeRate;
        }

        $('#offerTotalPrice1').val((amount * price).toFixed(2));
    }
    function updateTotalPrice2(offerNumber) {
        var amount = parseFloat($('#offerAmount' + offerNumber).val()) || 0;
        var price = parseFloat($('#offerPrice' + offerNumber).val().replace(',', '.')) || 0;

        var exchangeRateTextboxId = '#exchangeRateTextbox' + offerNumber;
        var exchangeRateId = '#exchangeRate' + offerNumber;

        if ($(exchangeRateTextboxId).is(":visible")) {
            var exchangeRate = parseFloat($(exchangeRateId).val().replace(',', '.')) || 1;
            price = price * exchangeRate;
        }

        $('#offerTotalPrice' + offerNumber).val((amount * price).toFixed(2));
    }

    function getOfferData(offerNumber) {
        var offerCompanyName = $(`#offerCompanyName${offerNumber}`).val();
        var offerCompanyPhone = $(`#offerCompanyPhone${offerNumber}`).val();
        var offerCompanyAddress = $(`#offerCompanyAddress${offerNumber}`).val();
        var offerCurrencyType = $(`#offerCurrencyType${offerNumber}`).val();
        var offerAmount = $(`#offerAmount${offerNumber}`).val();
        var offerMaterial = $(`#offerMaterial${offerNumber}`).val();
        var offerPrice = $(`#offerPrice${offerNumber}`).val();
        var offerTotalPrice = $(`#offerTotalPrice${offerNumber}`).val();
        var notRegisteredProvider = $(`#notRegisteredProvider${offerNumber}`).prop('checked');
        var selectedProviderId = $(`#provider${offerNumber}`).val();
        var deadlineDate = $(`#deadlineDate${offerNumber}`).val();
        var maturityDate = $(`#maturityDate${offerNumber}`).val();
        var paymentType = $(`input[name='paymentType${offerNumber}']:checked`).val();
        var InstallmentPayment = $(`#maturitySelect${offerNumber}`).val();
        var PartialPayment = $(`#partialSelect${offerNumber}`).val();



        if (notRegisteredProvider) {
            selectedProviderId = null;
        }

        return {
            OfferCompanyName: offerCompanyName,
            OfferCompanyPhone: offerCompanyPhone,
            OfferCompanyAddress: offerCompanyAddress,
            IsProviderRegistered: !notRegisteredProvider,
            OfferCurrencyType: offerCurrencyType,
            OfferAmount: offerAmount,
            OfferMaterial: offerMaterial,
            OfferPrice: offerPrice,
            OfferTotalPrice: offerTotalPrice,
            OfferCompanyId: selectedProviderId,
            deadlineDate: deadlineDate,
            maturityDate: maturityDate,
            paymentType: paymentType,
            InstallmentPayment: InstallmentPayment,
            PartialPayment: PartialPayment
        };
    }

    // function getFileData() {
    //     return new Promise(function (resolve, reject) {
    //         var fileInput = document.getElementById('fileInput');
    //         if (fileInput.files.length === 0) {
    //             resolve(null);
    //             return;
    //         }

    //         var file = fileInput.files[0];
    //         var reader = new FileReader();

    //         reader.onload = function (event) {
    //             var fileContent = event.target.result.split(',')[1];
    //             resolve(fileContent);
    //         };

    //         reader.onerror = function (error) {
    //             reject(error);
    //         };

    //         reader.readAsDataURL(file);
    //     });
    // }

    function getFileData(offerId) {
        return new Promise(function (resolve, reject) {
            var fileInput = document.getElementById('fileInput' + offerId);
            if (fileInput.files.length === 0) {
                resolve({ fileName: null, fileContent: null });
                return;
            }

            var file = fileInput.files[0];
            var reader = new FileReader();

            reader.onload = function (event) {
                var fileContent = event.target.result.split(',')[1];
                resolve({
                    fileName: file.name,
                    fileContent: fileContent
                });
            };

            reader.onerror = function (error) {
                reject(error);
            };

            reader.readAsDataURL(file);
        });
    }

    function validateAndSubmit(offerNumber) {
        var currencyType1 = $('#offerCurrencyType1').val();
        var exchangeRate1 = $('#exchangeRate1').val();
        var currencyType2 = $('#offerCurrencyType2').val();
        var exchangeRate2 = $('#exchangeRate2').val();
        var currencyType3 = $('#offerCurrencyType3').val();
        var exchangeRate3 = $('#exchangeRate3').val();

        if ((currencyType1 == '2' || currencyType1 == '3') && exchangeRate1.trim() === '') {
            toastr.error("Türk Lirası dışındaki para birimleri için kur bilgisi girilmelidir.", "Error");
            return false;
        }
        if ((currencyType2 == '2' || currencyType2 == '3') && exchangeRate2.trim() === '') {
            toastr.error("Türk Lirası dışındaki para birimleri için kur bilgisi girilmelidir.", "Error");
            return false;
        }
        if ((currencyType3 == '2' || currencyType3 == '3') && exchangeRate3.trim() === '') {
            toastr.error("Türk Lirası dışındaki para birimleri için kur bilgisi girilmelidir.", "Error");
            return false;
        }
        updateDemand(offerNumber);

    }


    // function updateDemand(offerNumber) {
    //     var demandId = @Model.DemandId;
    //     var companyId = $('#companyName').val();
    //     var locationId = $('#location').val();
    //     var departmentId = $('#department').val();
    //     var description = $('#description').val();

    //     var offer1Data = getOfferData(offerNumber);

    //     var exchangeRate = '';
    //     if (offerNumber === 1) {
    //         exchangeRate = $('#exchangeRate1').val().trim();
    //     } else if (offerNumber === 2) {
    //         exchangeRate = $('#exchangeRate2').val().trim();
    //     } else if (offerNumber === 3) {
    //         exchangeRate = $('#exchangeRate3').val().trim();
    //     }

    //     // var fileInputs = document.querySelectorAll('input[type="file"]');
    //     // for (var i = 0; i < fileInputs.length; i++) {
    //     //     var fileInput = fileInputs[i];
    //     //     if (fileInput.files.length > 0) {
    //     //         for (var j = 0; j < fileInput.files.length; j++) {
    //     //             formData.append('Files', fileInput.files[j]);
    //     //             formData.append('FileNames', fileInput.files[j].name);
    //     //         }
    //     //     }
    //     // }

    //     var updateDemandViewModel = {
    //         DemandId: demandId,
    //         CompanyId: companyId,
    //         CompanyLocationId: locationId,
    //         DepartmentId: departmentId,
    //         Description: description,
    //         OfferCompanyName: offer1Data.OfferCompanyName,
    //         OfferCompanyPhone: offer1Data.OfferCompanyPhone,
    //         OfferCompanyAddress: offer1Data.OfferCompanyAddress,
    //         IsProvider1Registered: offer1Data.IsProviderRegistered,
    //         OfferCurrencyType: offer1Data.OfferCurrencyType,
    //         OfferAmount: offer1Data.OfferAmount,
    //         OfferMaterial: offer1Data.OfferMaterial,
    //         OfferPrice: offer1Data.OfferPrice,
    //         OfferTotalPrice: offer1Data.OfferTotalPrice,
    //         OfferCompanyId: offer1Data.OfferCompanyId,
    //         ExchangeRate: exchangeRate !== '' ? exchangeRate : null,
    //         deadlineDate: offer1Data.deadlineDate,
    //         maturityDate: offer1Data.maturityDate,
    //         paymentType : offer1Data.paymentType !== '' ?offer1Data.paymentType : null ,
    //         InstallmentPayment : offer1Data.InstallmentPayment !== '' ? offer1Data.InstallmentPayment : null
    //         PartialPayment : offer1Data.PartialPayment !== '' ? offer1Data.PartialPayment : null ,
    //     };

    //     console.log(updateDemandViewModel);
    //     $.ajax({
    //         url: '/api/Demands/UpdateDemand',
    //         type: 'POST',
    //         contentType: 'application/json',
    //         data: JSON.stringify(updateDemandViewModel),
    //         success: function (result) {
    //             toastr.success("Demand Offer Created", "Success");
    //             location.reload();
    //         },
    //         error: function (error) {
    //             console.error('Error updating demand:', error);
    //         }
    //     });
    // }

    function updateDemand(offerNumber) {
        var demandId = @Model.DemandId;
        var companyId = $('#companyName').val();
        var locationId = $('#location').val();
        var departmentId = $('#department').val();
        var description = $('#description').val();

        var exchangeRate = '';
        if (offerNumber === 1) {
            exchangeRate = $('#exchangeRate1').val().trim();
        } else if (offerNumber === 2) {
            exchangeRate = $('#exchangeRate2').val().trim();
        } else if (offerNumber === 3) {
            exchangeRate = $('#exchangeRate3').val().trim();
        }

        var offer1Data = getOfferData(offerNumber);


        getFileData(offerNumber).then(function (fileData) {
            offer1Data.fileContent = fileData.fileContent;
            offer1Data.fileName = fileData.fileName;

            if (fileData.fileContent) {
                offer1Data.FileContent = fileData.fileContent;
                offer1Data.FileName = fileData.fileName;
            }

            var updateDemandViewModel = {
                DemandId: demandId,
                CompanyId: companyId,
                CompanyLocationId: locationId,
                DepartmentId: departmentId,
                Description: description,
                OfferCompanyName: offer1Data.OfferCompanyName,
                OfferCompanyPhone: offer1Data.OfferCompanyPhone,
                OfferCompanyAddress: offer1Data.OfferCompanyAddress,
                IsProvider1Registered: offer1Data.IsProviderRegistered,
                OfferCurrencyType: offer1Data.OfferCurrencyType,
                OfferAmount: offer1Data.OfferAmount,
                OfferMaterial: offer1Data.OfferMaterial,
                OfferPrice: offer1Data.OfferPrice,
                OfferTotalPrice: offer1Data.OfferTotalPrice,
                OfferCompanyId: offer1Data.OfferCompanyId,
                ExchangeRate: exchangeRate !== '' ? exchangeRate : null,
                deadlineDate: offer1Data.deadlineDate,
                maturityDate: offer1Data.maturityDate,
                paymentType: offer1Data.paymentType !== '' ? offer1Data.paymentType : null,
                InstallmentPayment: offer1Data.InstallmentPayment !== '' ? offer1Data.InstallmentPayment : null,
                PartialPayment: offer1Data.PartialPayment !== '' ? offer1Data.PartialPayment : null,
                FileContent: offer1Data.fileContent,
                FileName: offer1Data.fileName
            };

            $.ajax({
                url: '/api/Demands/UpdateDemand',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updateDemandViewModel),
                success: function (response) {
                    console.log("Dosya ve veriler başarıyla gönderildi.");
                    toastr.success("Demand Offer Created", "Success");
                    setTimeout(function () {
                        location.reload();
                    }, 2000);
                },
                error: function (error) {
                    console.error("Bir hata oluştu:", error);
                }
            });
        });
    }


    function changeStatus(demandId) {
        var demandStatusChangeViewModel = {
            DemandId: demandId,
            Status: 2
        };

        $.ajax({
            url: '/api/Demands/ChangeStatus',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(demandStatusChangeViewModel),
            success: function (statusResult) {
                console.log(statusResult);
                toastr.success("Status Changed", "Success");
                window.location.href = '/Home/Index';
                toastr.error("Bilgileri Kontrol Edin.", "Error");



            },
            error: function (error) {
                console.error('Talep durumu değiştirme hatası:', error);
                toastr.error("Unexpected Error", "Error");

            }
        });
    }


    function declineChangeStatus(demandId) {

            var description = document.getElementById("descriptionInput").value; 

        var demandStatusChangeViewModel = {
            DemandId: demandId,
            Status: 0,
             Description: description
        };

        $.ajax({
            url: '/api/Demands/declineChangeStatus',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(demandStatusChangeViewModel),
            success: function (statusResult) {
                console.log(statusResult);
                toastr.success("Status Changed", "Success");
                window.location.href = '/Home/Index';
                toastr.error("Bilgileri Kontrol Edin.", "Error");



            },
            error: function (error) {
                console.error('Talep durumu değiştirme hatası:', error);
                toastr.error("Unexpected Error", "Error");

            }
        });
    }


</script>
<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"> </script>
