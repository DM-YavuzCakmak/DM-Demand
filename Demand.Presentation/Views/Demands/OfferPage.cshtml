@using Demand.Domain.ViewModels
@using System.Security.Claims
@using Newtonsoft.Json

@model List<OfferRequestViewModel>

@{
    var claimsIdentity = (ClaimsIdentity)User.Identity;
    var claims = claimsIdentity.Claims;
    var userId = long.Parse(claims.FirstOrDefault(x => x.Type == "UserId").Value);
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="~/css/index.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.js"></script>
    <style>
        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            flex-direction: column;
        }

        main {
            margin-top: 20px;
            width: 95%;
            max-width: 1200px;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        #siteform {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 8px;
            border: 1px solid #dddddd;
            text-align: left;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .price-input, .totalprice-input {
            width: 100px;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-sizing: border-box;
        }

        input[type="text"] {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }

        #addButton, #removeButton {
            margin-top: 10px;
            background-color: #5cb85c;
            color: #fff;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #addButton:hover, #removeButton:hover {
                background-color: #45a049;
            }

        .input-sm {
            height: auto !important;
            padding: 5px;
        }

        select {
            width: 100%;
            padding: 5px;
            margin: 0 !important;
        }

        input {
            width: 100%;
            padding: 5px;
        }

    </style>
</head>
<body>
    <main class="table" id="demandTable">
        <h2 style="text-align: center; color: white;">TEKLİF GİRİŞİ</h2>
        <form id="siteform" enctype="multipart/form-data">
            <section class="tableBody">
                <table id="dataTable">
                    <thead>
                        <tr>
                            <th>KATEGORİ</th>
                            <th>ALT KATEGORİ</th>
                            <th>ÜRÜN</th>
                            <th>ÜRÜN KODU</th>
                            <th>ÜRÜN ADI</th>
                            <th>MİKTAR</th>
                            <th>BİRİM</th>
                            <th>FİYAT</th>
                            <th>TOPLAM FİYAT</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var offerRequestViewModel in Model)
                        {
                            <tr>
                                <td><input type="hidden" name="requestInfoId[]" class="requestInfoId" value="@offerRequestViewModel.RequestInfoId" /></td>
                                <td>
                                    <select name="category[]" class="category" onchange="updateSubcategories(this.parentNode.parentNode.parentNode)">
                                        @if (Model[0].NebimCategoryModels != null)
                                        {
                                            <option>Lütfen seçiniz</option>
                                            foreach (var product in Model[0].NebimCategoryModels)
                                            {
                                                if (product.ProductHierarchyLevel01Code == offerRequestViewModel.ProductCategoryId.ToString())
                                                {
                                                    <option value="@product.ProductHierarchyLevel01Code" selected>@product.ProductHierarchyLevel01Description </option>
                                                }
                                                else
                                                {
                                                    <option value="@product.ProductHierarchyLevel01Code">@product.ProductHierarchyLevel01Description </option>
                                                }
                                            }
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="subcategory[]" class="subcategory" onchange="updateProduct(this.parentNode.parentNode.parentNode)">
                                        @if (Model[0].NebimSubCategoryModels != null)
                                        {
                                            <option>Lütfen seçiniz</option>
                                            foreach (var product in Model[0].NebimSubCategoryModels)
                                            {
                                                if (product.ProductHierarchyLevel02Code == offerRequestViewModel.ProductSubCategoryId.ToString())
                                                {
                                                    <option value="@product.ProductHierarchyLevel02Code" selected>@product.ProductHierarchyLevel02Description </option>
                                                }
                                                else
                                                {
                                                    <option value="@product.ProductHierarchyLevel02Code">@product.ProductHierarchyLevel02Description </option>
                                                }
                                            }
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="product[]" class="product" onchange="updateProductCode(this.parentNode.parentNode.parentNode)">
                                        @if (Model[0].NebimProductModels != null)
                                        {
                                            <option>Lütfen seçiniz</option>
                                            foreach (var product in Model[0].NebimProductModels)
                                            {
                                                if (product.ProductCode == offerRequestViewModel.ProductCode)
                                                {
                                                    <option value="@product.ProductCode" selected>@product.ProductDescription </option>
                                                }
                                                else
                                                {
                                                    <option value="@product.ProductCode">@product.ProductDescription </option>
                                                }
                                            }
                                        }
                                    </select>
                                </td>
                                <td><input type="text" name="productCode[]" class="productCode" readonly value="@offerRequestViewModel.ProductCode" /></td>
                                <td><input type="text" name="productName[]" class="productName" readonly value="@offerRequestViewModel.ProductName" /></td>
                                <td><input type="text" name="quantity[]" class="quantity" readonly value="@offerRequestViewModel.Quantity" /></td>
                                <td>
                                    <select name="unit[]" class="unit">
                                        <option value="@offerRequestViewModel.Unit">@(offerRequestViewModel.Unit == "1" ? "Adet" : "Metre")</option>
                                    </select>
                                </td>
                                @* <td><input type="text" name="unit[]" class="unit" readonly value="@(offerRequestViewModel.Unit == "1" ? "Adet" : "Metre")" /></td> *@
                                <td><input type="text" name="price[]" class="price" value="@offerRequestViewModel.Price" /></td>
                                <td><input type="text" name="totalPrice[]" class="totalprice" readonly value="@offerRequestViewModel.TotalPrice" /></td>
                                <td><input type="hidden" name="offerRequestId[]" value="@(offerRequestViewModel.OfferRequestId ?? 0)" /></td>
                            </tr>
                        }
                    </tbody>
                    </tabl>
                    <button id="addButton" type="button" onclick="addRow()">Satır Ekle</button>
                    <button id="removeButton" type="button" onclick="removeRow()">Satır Sil</button>

                    <div class="button-group">
                        <button id="sendButton" type="button" onclick="sendDemand()">Oluştur</button>
                    </div>
            </section>
        </form>
    </main>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
<style>
    #overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    #sendButton {
        background-color: #4CAF50;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.price').forEach(function (priceInput) {
            priceInput.addEventListener('input', function () {
                var row = this.closest('tr');
                var quantity = parseFloat(row.cells[6].childNodes[0].value) || 0;
                var price = parseFloat(this.value) || 0;
                var totalPrice = quantity * price;
                var totalPriceInput = row.querySelector('.totalprice');
                totalPriceInput.value = totalPrice.toFixed(2);
            });
        });
    });

    function updateSubcategories(parentNode) {
        debugger;
        var categoryValue = parentNode.querySelector('.category').value;
        var subcategorySelect = parentNode.querySelector('.subcategory');

        var subCategoryModels = @Html.Raw(Json.Serialize(Model[0].NebimSubCategoryModels));

        subcategorySelect.innerHTML = '';
        var defaultOption = document.createElement('option');
        defaultOption.text = "Lütfen seçiniz";
        subcategorySelect.add(defaultOption);
        subCategoryModels.forEach(function (subcategory) {
            if (subcategory.productHierarchyLevel01Code == categoryValue) {
                var option = document.createElement('option');
                option.value = subcategory.productHierarchyLevel02Code;
                option.textContent = subcategory.productHierarchyLevel02Description;
                subcategorySelect.appendChild(option);
            }
        });
    }

    function updateProduct(parentNode) {
        debugger;
        var subcategoryValue = parentNode.querySelector('.subcategory').value;
        var productSelect = parentNode.querySelector('.product');

        var productModels = @Html.Raw(Json.Serialize(Model[0].NebimProductModels));

        productSelect.innerHTML = '';
        var defaultOption = document.createElement('option');
        defaultOption.text = "Lütfen seçiniz";
        productSelect.add(defaultOption);
        productModels.forEach(function (product) {
            if (product.productHierarchyLevel02Code == subcategoryValue) {
                var option = document.createElement('option');
                option.value = product.productCode;
                option.textContent = product.productDescription;
                productSelect.appendChild(option);
            }
        });
    }

    function updateProductCode(parentNode) {
        var productSelect = parentNode.querySelector('.product');
        var productCodeInput = parentNode.querySelector('.productCode');
        var productNameInput = parentNode.querySelector('.productName');
        var productModels = @Html.Raw(Json.Serialize(Model[0].NebimProductModels));
        var selectedProductValue = productSelect.value;

        var foundProductCode = null;
        var foundProductName = null;
        productModels.forEach(function (product) {
            if (product.productCode == selectedProductValue) {
                foundProductCode = product.productCode;
                foundProductName = product.productDescription;
            }
        });
        if (foundProductCode) {
            productCodeInput.value = foundProductCode;
            productNameInput.value = foundProductName;
        } else {
            productCodeInput.value = "Ürün Kodu Yok";
            productNameInput.value = "Ürün Adı Yok";
        }
    }

    function addRow() {
        var table = document.getElementById("dataTable").getElementsByTagName('tbody')[0];
        var newRow = table.insertRow(table.rows.length);
        var cells = ['requestInfoId', 'category', 'subcategory', 'product', 'productCode', 'productName', 'quantity', 'unit', 'price', 'totalPrice', 'offerRequestId'];

        cells.forEach(function (cell) {
            var newCell = newRow.insertCell(-1);
            if (cell === 'category' || cell === 'subcategory' || cell === 'product' || cell === 'unit') {
                var div = document.createElement("div");
                div.className = "select-wrapper";
                var select = document.createElement("select");
                select.name = cell + "[]";
                select.className = cell;
                if (cell === 'unit') {
                    var option1 = document.createElement("option");
                    option1.text = "Adet";
                    option1.value = "1";
                    select.appendChild(option1);
                    var option2 = document.createElement("option");
                    option2.text = "Metre";
                    option2.value = "2";
                    select.appendChild(option2);

                }
                else if (cell === 'category') {
                    select.addEventListener('change', function () {
                        updateSubcategories(this.parentNode.parentNode.parentNode);
                    });
                    var subCategoryModels = @Html.Raw(Json.Serialize(Model[0].NebimCategoryModels));
                    select.innerHTML = '';
                    var defaultOption = document.createElement('option');
                    defaultOption.text = "Lütfen seçiniz";
                    select.add(defaultOption);
                    subCategoryModels.forEach(function (subcategory) {
                        var option = document.createElement('option');
                        option.value = subcategory.productHierarchyLevel01Code;
                        option.textContent = subcategory.productHierarchyLevel01Description;
                        select.appendChild(option);
                    });
                } else if (cell === 'subcategory') {
                    select.addEventListener('change', function () {
                        updateProduct(this.parentNode.parentNode.parentNode);
                    });
                } else if (cell === 'product') {
                    select.addEventListener('change', function () {
                        updateProductCode(this.parentNode.parentNode.parentNode);
                    });
                }
                div.appendChild(select);
                newCell.appendChild(div);
            } else if (cell == "offerRequestId") {
                var input = document.createElement("input");
                input.type = "hidden";
                input.name = cell + "[]";
                input.value = 0;
                input.className = cell;

                newCell.appendChild(input);
            } else {
                var input = document.createElement("input");
                input.type = "text";
                input.name = cell + "[]";
                input.className = cell;

                if (cell === 'price') {
                    input.addEventListener('input', function () {
                        var row = this.closest('tr');
                        var quantity = parseFloat(row.cells[6].childNodes[0].value) || 0;
                        var price = parseFloat(this.value) || 0;
                        var totalPrice = quantity * price;
                        var totalPriceInput = row.cells[9].childNodes[0];
                        totalPriceInput.value = totalPrice.toFixed(2);
                    });
                }

                newCell.className = "form-group";
                newCell.appendChild(input);
            }
        });
    }

    function removeRow() {
        var table = document.getElementById("dataTable").getElementsByTagName('tbody')[0];
        if (table.rows.length > @Html.Raw(Model.Count)) {
            table.deleteRow(-1);
        }
    }
    function sendDemand() {
        var formData = new FormData();

        formData.append('DemandOfferId', @Model[0].DemandOfferId);
        formData.append('DemandId', @Model[0].DemandId);

        var table = document.getElementById("dataTable");
        var rows = table.getElementsByTagName("tr");

        for (var i = 1; i < rows.length; i++) {
            var cells = rows[i].getElementsByTagName("td");
            var requestInfoId = cells[0].querySelector("input[name='requestInfoId[]']").value;
            var category = cells[1].querySelector("select[name='category[]']").value;
            var subcategory = cells[2].querySelector("select[name='subcategory[]']").value;
            var product = cells[3].querySelector("select[name='product[]']").selectedOptions[0].textContent;
            var productName = cells[5].querySelector("input[name='productName[]']").value;
            var productCode = cells[4].querySelector("input[name='productCode[]']").value;
            var unit = cells[7].querySelector("select[name='unit[]']").value;
            var quantity = cells[6].querySelector("input[name='quantity[]']").value;
            var price = cells[8].querySelector("input[name='price[]']").value;
            var totalPrice = cells[9].querySelector("input[name='totalPrice[]']").value;
            var offerRequestId = cells[10].querySelector("input[name='offerRequestId[]']").value;
            console.log(requestInfoId, category, subcategory, product, productName, productCode, unit, quantity, price, totalPrice);
            formData.append('requestInfoId[]', requestInfoId);
            formData.append('Category[]', category);
            formData.append('Subcategory[]', subcategory);
            formData.append('Unit[]', unit);
            formData.append('Quantity[]', quantity);
            formData.append('Product[]', product);
            formData.append('ProductCode[]', productCode);
            formData.append('ProductDescription[]', productName);
            formData.append('Price[]', price);
            formData.append('TotalPrice[]', totalPrice);
            formData.append('OfferRequestId[]', offerRequestId);
        }

        console.log("formdata", formData);
        $.ajax({
            url: '@Url.Action("AddOfferRequest", "Demands")',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                console.log(result);
                toastr.success("Offer Request Created", "Success");

                window.location.href = '/api/Demands/Edit/' + @Model[0].DemandId;
            },
            error: function (error) {
                toastr.error("Unexpected Error", "Error");
            }
        });
    }
</script>