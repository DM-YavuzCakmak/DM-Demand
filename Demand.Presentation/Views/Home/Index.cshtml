@using Demand.Domain.ViewModels
@using System.Security.Claims
@using System.Text.Json
@model List<DemandViewModel>

@{
    var claimsIdentity = (ClaimsIdentity)User.Identity;
    var claims = claimsIdentity.Claims;
    var userId = long.Parse(claims.FirstOrDefault(x => x.Type == "UserId").Value);
    var userName = claims.FirstOrDefault(x => x.Type == "FirstName")?.Value;
    var userLastName = claims.FirstOrDefault(x => x.Type == "LastName")?.Value;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="~/css/index.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://use.typekit.net/ovt6ynt.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&family=Oswald:wght@200;300;400;500;600;700&family=Roboto+Condensed:wght@300;400;700&family=Roboto:wght@100;300;400;500;700;900&family=Source+Sans+Pro:ital,wght@0,200;0,300;0,400;0,600;0,700;0,900;1,200;1,300;1,400;1,600;1,700;1,900&family=Spectral:wght@200;300;400;500;600;700;800&display=swap" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <title>DEM MUSEUMS</title>
</head>

<body>
    <div class="header">
        <div class="logo">
            <img id="logo" src="~/images/dem_logo.png" alt="Logo">
        </div>
        <div class="user-info">
            <p>
                @{
                    string CustomName = $"{userName} {userLastName}";
                }

                @CustomName
            </p>
        </div>
    </div>
    <main class="table" id="demandTable">
        <section class="table__header">
            <h1>Talep Listesi</h1>
            <div class="input-group">
                <input type="search" id="searchInput" placeholder="Arama...">
                <img src="~/images/search.png" alt="">
            </div>
            <button class="create-demand-button" onclick="openCreateDemandPopup()">+ Talep Oluştur</button>
        </section>
        <div class="card tabs">
            <input id="tab-1" type="radio" class="tab tab-selector" checked="checked" name="tab" />
            <label for="tab-1" class="tab tab-primary">Bekleyenler</label>
            <input id="tab-2" type="radio" class="tab tab-selector" name="tab" />
            <label for="tab-2" class="tab tab-success">Onaylananlar</label>
            <input id="tab-3" type="radio" class="tab tab-selector" name="tab" />
            <label for="tab-3" class="tab tab-default">Reddedilenler</label>
            <div class="tabsShadow"></div>
            @* <div class="glider"></div> *@
            <section class="content">
                <div class="item" id="content-1">
                    <section class="tableBody">
                        <table>
                            <thead>
                                <tr>
                                    <th> Talep No <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Başlığı <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Eden <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Lokasyon <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Statü <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Kimde <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Onay/Red Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Y.K Üyesi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Aksiyon <span class="icon-arrow">&UpArrow;</span></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var demand in Model)
                                {
                                    if (demand.Status == 0)
                                    {
                                        <tr>
                                            <td data-label="Talep No">@demand.DemandId</td>
                                            <td data-label="Talep Başlığı">@demand.DemandTitle</td>
                                            <td data-label="Talep Eden">@demand.DemanderName</td>
                                            <td data-label="Lokasyon">@demand.LocationName</td>
                                            @if (Model.Count > 0 && demand.DemanderName != null)
                                            {
                                                <td data-label="Talep Tarihi">@demand.DemandDate.ToString("yyyy-MM-dd")</td>

                                            }
                                            @if (Model.Count > 0 && demand.Status != null)
                                            {
                                                <td data-label="Statü">
                                                    <p class="status @GetStatusClass((int)demand.Status)">@GetStatusText((int)demand.Status)</p>
                                                </td>
                                            }
                                            <td data-label="Kimde">@demand.WhoseTurn</td>
                                            <td data-label="Onay/Red Tarihi">@demand.AprrovedDate</td>
                                            <td data-label="Y.K Üyesi">@demand.Yk</td>

                                            <td>
                                                @if ((demand.CreatedAt == userId || userId == 10 || userId == 57) && demand.Status == 0)
                                                {
                                                    <a href="@Url.Action("Edit", "Demands", new { id = demand.DemandId })" class="edit-button">Güncelle</a>
                                                }
                                                @if (userId == 12 || userId == 10 || userId == 57 || @demand.isDemandOffer == true)
                                                {
                                                    <a href="@Url.Action("DemandOfferDetail", "Demands", new { DemandId = demand.DemandId })" class="view-button">Teklif Detayı</a>

                                                }
                                                else if (Model.Count > 0 && demand.DemanderName != null)
                                                {
                                                    <a href="@Url.Action("Detail", "Demands", new { id = demand.DemandId })" class="view-button">Teklif Detayı</a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </section>
                </div>
                <div class="item" id="content-2">
                    <section class="tableBody">
                        <table>
                            <thead>
                                <tr>
                                    <th> Talep No <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Başlığı <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Eden <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Lokasyon <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Statü <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Kimde <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Onay/Red Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Y.K Üyesi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Aksiyon <span class="icon-arrow">&UpArrow;</span></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var demand in Model)
                                {
                                    if (demand.Status == 2)
                                    {
                                        <tr>
                                            <td data-label="Talep No">@demand.DemandId</td>
                                            <td data-label="Talep Başlığı">@demand.DemandTitle</td>
                                            <td data-label="Talep Eden">@demand.DemanderName</td>
                                            <td data-label="Lokasyon">@demand.LocationName</td>
                                            @if (Model.Count > 0 && demand.DemanderName != null)
                                            {
                                                <td data-label="Talep Tarihi">@demand.DemandDate.ToString("yyyy-MM-dd")</td>

                                            }
                                            
                                            @if (Model.Count > 0 && demand.Status != null)
                                            {
                                                <td data-label="Statü">
                                                    <p class="status @GetStatusClass((int)demand.Status)">@GetStatusText((int)demand.Status)</p>
                                                </td>
                                            }

                                            <td data-label="Kimde">@demand.WhoseTurn</td>
                                            <td data-label="Onay/Red Tarihi">@demand.AprrovedDate</td>
                                            <td data-label="Y.K Üyesi">@demand.Yk</td>
                                            <td>
                                                @if ((demand.CreatedAt == userId || userId == 10 || userId == 57) && demand.Status == 0)
                                                {
                                                    <a href="@Url.Action("Edit", "Demands", new { id = demand.DemandId })" class="edit-button">Güncelle</a>
                                                }
                                                @if (userId == 12 || userId == 10 || userId == 57 || @demand.isDemandOffer == true)
                                                {
                                                    <a href="@Url.Action("DemandOfferDetail", "Demands", new { DemandId = demand.DemandId })" class="view-button">Teklif Detayı</a>

                                                }
                                                else if (Model.Count > 0 && demand.DemanderName != null)
                                                {
                                                    <a href="@Url.Action("Detail", "Demands", new { id = demand.DemandId })" class="view-button">Teklif Detayı</a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </section>
                </div>
                <div class="item" id="content-3">
                    <section class="tableBody">
                        <table>
                            <thead>
                                <tr>
                                    <th> Talep No <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Başlığı <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Eden <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Lokasyon <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Talep Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Statü <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Kimde <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Onay/Red Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Y.K Üyesi <span class="icon-arrow">&UpArrow;</span></th>
                                    <th> Aksiyon <span class="icon-arrow">&UpArrow;</span></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var demand in Model)
                                {
                                    if (demand.Status == 1)
                                    {
                                        <tr>
                                            <td data-label="Talep No">@demand.DemandId</td>
                                            <td data-label="Talep Başlığı">@demand.DemandTitle</td>
                                            <td data-label="Talep Eden">@demand.DemanderName</td>
                                            <td data-label="Lokasyon">@demand.LocationName</td>
                                            @if (Model.Count > 0 && demand.DemanderName != null)
                                            {
                                                <td data-label="Talep Tarihi">@demand.DemandDate.ToString("yyyy-MM-dd")</td>
                                            }
                                            @if (Model.Count > 0 && demand.Status != null)
                                            {
                                                <td data-label="Statü">
                                                    <p class="status @GetStatusClass((int)demand.Status)">@GetStatusText((int)demand.Status)</p>
                                                </td>
                                            }
                                            <td data-label="Kimde">@demand.WhoseTurn</td>
                                            <td data-label="Onay/Red Tarihi">@demand.AprrovedDate</td>
                                            <td data-label="Y.K Üyesi">@demand.Yk</td>
                                            <td>
                                                @if ((demand.CreatedAt == userId || userId == 10 || userId == 57) && demand.Status == 0)
                                                {
                                                    <a href="@Url.Action("Edit", "Demands", new { id = demand.DemandId })" class="edit-button">Güncelle</a>
                                                }
                                                @if (userId == 12 || userId == 10 || userId == 57 || @demand.isDemandOffer == true)
                                                {
                                                    <a href="@Url.Action("DemandOfferDetail", "Demands", new { DemandId = demand.DemandId })" class="view-button">Teklif Detayı</a>

                                                }
                                                else if (Model.Count > 0 && demand.DemanderName != null)
                                                {
                                                    <a href="@Url.Action("Detail", "Demands", new { id = demand.DemandId })" class="view-button">Teklif Detayı</a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </section>
                </div>
            </section>
        </div>
    </main>
    <div id="overlay"></div>

    <div id="createDemandPopup" class="popup">
        <div class="popup-header">
            <h2>Talep Oluştur</h2>
        </div>
        <div class="popup-content" style="overflow-y: auto !important;">
            <div class="form-row">
                <div class="form-group">
                    <label for="demandtitle">Başlık:</label>
                    <input type="text" id="demandtitle" placeholder="Talep Başlığı" name="demandtitle" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="companyName">Şirket Adı:</label>
                    <select id="companyName" name="companyName">
                        <option value="Please Select Company">Lütfen şirket seçin...</option>
                        @foreach (var company in ViewBag.Companies)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="location">Lokasyon:</label>
                    <select id="location" name="location" onchange="updateLocationId()">
                    </select>
                    <input type="hidden" id="locationId" name="locationId" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="locationUnits">Lokasyon Birimi:</label>
                    <select id="locationUnits" name="locationUnits" ">
                    </select>
                    <input type="hidden" id="locationUnitsId" name="locationUnitsId" />
                </div>

                <div class="form-group">
                    <label for="requestDate">Talep Tarihi:</label>
                    <input type="text" id="requestDate" name="requestDate" value="@DateTime.Now.ToString("dd/MM/yyyy")" readonly>
                </div>

            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="requirementDate">Gereklilik Tarihi: (Lütfen en az 3 gün sonrasını seçiniz!)</label>
                    <input type="date" id="requirementDate" name="requirementDate" min="@DateTime.Now.ToString("yyyy-MM-dd")">
                </div>
                <div class="form-group">
                    <label for="department">Departman:</label>
                    <select id="department" name="department">
                        <option value="Please Select department">Lütfen departman seçin..</option>
                    @foreach (var department in ViewBag.Department)
                    {
                            <option value="@department.Id">@department.Name</option>
                    }
                    </select>
                </div>


            </div>

            <div class="form-group">
                <label for="description">Dosya Seç:</label>
                <input type="file" id="fileInput" name="fileInput" multiple accept=".png, .jpeg, .pdf" />
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="description">Açıklama:</label>
                    <textarea id="description" name="description"></textarea>
                </div>

            </div>
            <table id="dataTable">
                <thead>
                    <tr>
                        <th>Tür</th>
                        <th>Kategori</th>
                        <th>Alt Kategori</th>
                        <th>Ürün Açıklaması</th>
                        <th>Ürün Kodu</th>
                        <th>Ürün Adı</th>
                        <th>Birim</th>
                        <th>Adet</th>
                    </tr>
                </thead>
            </table>
            <button id="addButton" type="button" onclick="addRow()">Satır Ekle</button>
            <button id="removeButton" type="button" onclick="removeRow()">Satır Sil</button>
            <button id="sendButton" type="button" onclick="sendDemand()">Oluştur</button>

        </div>
    </div>
    <div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:9999; text-align:center; color:white; font-size:24px; line-height:100vh;">
        Yükleniyor...
    </div>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/js/script.js"></script>
</body>

</html>


<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"> </script>
<script>
    $(document).ready(function () {
        $('#companyName').change(function () {
            var selectedCompanyId = $(this).val();

            $.ajax({
                url: '/api/CompanyLocations/GetLocations?companyId=' + selectedCompanyId,
                type: 'GET',
                success: function (data) {
                    $('#location').empty();
                    $('#locationUnits').empty();
                    $('#location').append('<option value="">Lütfen seçiniz</option>');
                    $('#locationUnits').append('<option value="">Lütfen seçiniz</option>');

                    if (data.data && data.data.length > 0) {
                        $.each(data.data, function (index, item) {
                            $('#location').append($('<option>', {
                                value: item.id,
                                text: item.name
                            }));
                        });

                        var firstLocationId = data.data[0].id;
                        $('#location').val(firstLocationId);
                        $('#locationId').val(firstLocationId);
                        fetchLocationUnits(firstLocationId);
                    }
                },
                error: function (error) {
                    console.error('Error fetching locations:', error);
                }
            });
        });

        $('#location').change(function () {
            var selectedLocationId = $(this).val();
            console.log("selectedLocationId", selectedLocationId);
            fetchLocationUnits(selectedLocationId);
        });

        function fetchLocationUnits(locationId) {
            $.ajax({
                url: '/api/CompanyLocationUnits/GetLocationUnits?locationId=' + locationId,
                type: 'GET',
                success: function (data) {
                    $('#locationUnits').empty();
                    $('#locationUnits').append('<option value="">Lütfen seçiniz</option>');

                    if (data.data && data.data.length > 0) {
                        $.each(data.data, function (index, item) {
                            $('#locationUnits').append($('<option>', {
                                value: item.id,
                                text: item.name
                            }));
                        });

                        var firstLocationUnitId = data.data[0].id;
                        $('#locationUnits').val(firstLocationUnitId);
                        $('#locationUnitsId').val(firstLocationUnitId);
                    }
                },
                error: function (error) {
                    console.error('Error fetching location units:', error);
                }
            });
        }

        $('#searchInput').on('input', function () {
            var searchText = $(this).val().toLowerCase();

            $('tbody tr').each(function () {
                var rowText = $(this).text().toLowerCase();

                if (rowText.includes(searchText)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        var table = $('#demandTable').DataTable({
            "columnDefs": [
                {
                    "targets": [4],
                    "type": "date"
                }
            ],
            "order": [[1, 'desc']]
        });

        $('#demandTable th').on('click', function () {
            var columnIndex = $(this).index();
            var isAscending = table.order()[0][1] === 'asc';

            if (isAscending) {
                table.order([columnIndex, 'desc']).draw();
            } else {
                table.order([columnIndex, 'asc']).draw();
            }
        });

        document.getElementById('requirementDate').addEventListener('keypress', function (e) {
            e.preventDefault();
        });

        function updateLocationId() {
            var locationId = $('#location').val();
            $('#locationId').val(locationId);
        }
    });

    document.getElementById('requirementDate').addEventListener('keypress', function (e) {
        e.preventDefault();
    });

    function updateLocationId() {
        var locationId = $('#location').val();
        $('#locationId').val(locationId);
    }
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            closeCreateDemandPopup();
        }
    });
    function updateFileName(inputId) {
        var input = document.getElementById(inputId);
        var label = document.getElementById(inputId + 'Label');
        var fileName = document.getElementById(inputId + 'Name');

        if (input.files.length > 0) {
            fileName.textContent = input.files[0].name;
        } else {
            fileName.textContent = "";
        }
    }
    function openCreateDemandPopup() {
        var overlay = document.getElementById("overlay");
        var popup = document.getElementById("createDemandPopup");

        if (overlay && popup) {
            overlay.style.display = "block";
            popup.style.display = "block";

            popup.style.width = "80%";
            popup.style.height = "90%";

            overlay.addEventListener("click", function () {
                closeCreateDemandPopup();
            });
        }
    }

    function closeCreateDemandPopup() {
        var overlay = document.getElementById("overlay");
        var popup = document.getElementById("createDemandPopup");

        if (overlay && popup) {
            overlay.style.display = "none";
            popup.style.display = "none";
            overlay.removeEventListener("click", function () {
                closeCreateDemandPopup();
            });
        }
    }


    document.addEventListener('DOMContentLoaded', function () {
        var requirementDateInput = document.getElementById("requirementDate");

        requirementDateInput.addEventListener('change', function () {
            var today = new Date();
            var selectedDate = new Date(requirementDateInput.value);
            var threeDaysLater = new Date(today);
            threeDaysLater.setDate(today.getDate() + 3);

            if (selectedDate <= threeDaysLater) {
                requirementDateInput.value = '';
                alert('Bugünden sonraki üç günün tarihini seçemezsiniz.');
            }
        });
    });
    function addRow() {
        var table = document.getElementById("dataTable");
        var newRow = table.insertRow(table.rows.length);
        var cells = ['type', 'category', 'subcategory', 'product', 'productCode', 'productName', 'unit', 'quantity'];

        cells.forEach(function (cell) {
            var selectedCompanyId = $('#companyName').val();
            var newCell = newRow.insertCell(-1);
            if (cell === 'type' || cell === 'category' || cell === 'subcategory' || cell === 'product' || cell === 'unit') {
                var div = document.createElement("div");
                div.className = "select-wrapper";
                var select = document.createElement("select");
                select.name = cell + "[]";
                select.className = cell;
                if (cell === 'unit') {
                    var option1 = document.createElement("option");
                    option1.text = "Adet";
                    option1.value = "1";
                    select.appendChild(option1);
                    var option2 = document.createElement("option");
                    option2.text = "Metre";
                    option2.value = "2";
                    select.appendChild(option2);
                }
                else if (cell === 'category') {
                    var locationUnitId = $('#locationUnits').val();
                    var companyBrandCode = 1;
                    if (locationUnitId == 2 || locationUnitId == 8) {
                        companyBrandCode = 0;
                    }

                    select.addEventListener('change', function () {
                        updateSubcategories(this.parentNode.parentNode.parentNode);
                    });
                    var subCategoryModels = @Html.Raw(Json.Serialize(Model[0].NebimCategoryModels));
                    select.innerHTML = '';
                    var defaultOption = document.createElement('option');
                    defaultOption.text = "Lütfen seçiniz";
                    select.add(defaultOption);
                    subCategoryModels.forEach(function (subcategory) {
                        if (subcategory.companyCode == selectedCompanyId && subcategory.companyBrandCode == companyBrandCode) {
                            var option = document.createElement('option');
                            option.value = subcategory.productHierarchyLevel01Code;
                            option.textContent = subcategory.productHierarchyLevel01Description;
                            select.appendChild(option);
                        }
                    });
                } else if (cell === 'type') {
                    select.addEventListener('change', function () {
                        disableFields(this.parentNode.parentNode.parentNode);
                    });
                    var subCategoryModels = @Html.Raw(Json.Serialize(ViewBag.ProductCategories));
                    select.innerHTML = '';
                    var defaultOption = document.createElement('option');
                    defaultOption.text = "Lütfen seçiniz";
                    select.add(defaultOption);
                    subCategoryModels.forEach(function (subcategory) {
                        var option = document.createElement('option');
                        option.value = subcategory.id;
                        option.textContent = subcategory.productCategoryName;
                        select.appendChild(option);
                    });
                } else if (cell === 'subcategory') {
                    select.addEventListener('change', function () {
                        updateProduct(this.parentNode.parentNode.parentNode);
                    });
                } else if (cell === 'product') {
                    select.addEventListener('change', function () {
                        updateProductCode(this.parentNode.parentNode.parentNode);
                    });
                }
                div.appendChild(select);
                newCell.appendChild(div);
            } else {
                var input = document.createElement("input");
                input.type = "text";
                input.name = cell + "[]";
                input.className = cell;

                newCell.className = "form-group";
                newCell.appendChild(input);
            }
        });
    }

    function removeRow() {
        var table = document.getElementById("dataTable");//.getElementsByTagName('tbody')[0];
        if (table.rows.length > 1) {
            table.deleteRow(-1);
        }
    }

    function disableFields(parentNode) {
        var selectedTypeValue = parentNode.querySelector('.type').value;
        debugger;
        if (selectedTypeValue == 1) {
            parentNode.querySelector('.category').disabled = false;
            parentNode.querySelector('.subcategory').disabled = false;
            parentNode.querySelector('.product').disabled = false;
            parentNode.querySelector('.productCode').disabled = false;
        } else {
            parentNode.querySelector('.category').disabled = true;
            parentNode.querySelector('.subcategory').disabled = true;
            parentNode.querySelector('.product').disabled = true;
            parentNode.querySelector('.productCode').disabled = true;
        }
    }

    function updateSubcategories(parentNode) {
        debugger;
        var selectedCompanyId = $('#companyName').val();
        var locationUnitId = $('#locationUnits').val();
        var companyBrandCode = 1;
        if (locationUnitId == 2 || locationUnitId == 8) {
            companyBrandCode = 0;
        }

        var categoryValue = parentNode.querySelector('.category').value;
        var subcategorySelect = parentNode.querySelector('.subcategory');

        var subCategoryModels = @Html.Raw(Json.Serialize(Model[0].NebimSubCategoryModels));

        subcategorySelect.innerHTML = '';
        var defaultOption = document.createElement('option');
        defaultOption.text = "Lütfen seçiniz";
        subcategorySelect.add(defaultOption);
        subCategoryModels.forEach(function (subcategory) {
            if (subcategory.companyCode == selectedCompanyId && subcategory.companyBrandCode == companyBrandCode && subcategory.productHierarchyLevel01Code == categoryValue) {
                var option = document.createElement('option');
                option.value = subcategory.productHierarchyLevel02Code;
                option.textContent = subcategory.productHierarchyLevel02Description;
                subcategorySelect.appendChild(option);
            }
        });
    }
    function updateProduct(parentNode) {
        debugger;
        var selectedCompanyId = $('#companyName').val();
        var locationUnitId = $('#locationUnits').val();
        var companyBrandCode = 1;
        if (locationUnitId == 2 || locationUnitId == 8) {
            companyBrandCode = 0;
        }

        var subcategoryValue = parentNode.querySelector('.subcategory').value;
        var productSelect = parentNode.querySelector('.product');

        var productModels = @Html.Raw(Json.Serialize(Model[0].NebimProductModels));

        productSelect.innerHTML = '';
        var defaultOption = document.createElement('option');
        defaultOption.text = "Lütfen seçiniz";
        productSelect.add(defaultOption);
        productModels.forEach(function (product) {
            if (product.companyCode == selectedCompanyId && product.companyBrandCode == companyBrandCode && product.productHierarchyLevel02Code == subcategoryValue) {
                var option = document.createElement('option');
                option.value = product.productCode;
                option.textContent = product.productDescription;
                productSelect.appendChild(option);
            }
        });
    }
    function updateProductCode(parentNode) {
        var selectedCompanyId = $('#companyName').val();
        var locationUnitId = $('#locationUnits').val();
        var companyBrandCode = 1;
        if (locationUnitId == 2 || locationUnitId == 8) {
            companyBrandCode = 0;
        }

        var productSelect = parentNode.querySelector('.product');
        var productCodeInput = parentNode.querySelector('.productCode');
        var productNameInput = parentNode.querySelector('.productName');
        var productModels = @Html.Raw(Json.Serialize(Model[0].NebimProductModels));
        var selectedProductValue = productSelect.value;

        var foundProductCode = null;
        var foundProductName = null;
        productModels.forEach(function (product) {
            if (product.companyCode == selectedCompanyId && product.companyBrandCode == companyBrandCode && product.productCode == selectedProductValue) {
                foundProductCode = product.productCode;
                foundProductName = product.productDescription;
            }
        });
        if (foundProductCode) {
            productCodeInput.value = foundProductCode;
            productNameInput.value = foundProductName;
        } else {
            productCodeInput.value = "Ürün Kodu Yok";
            productNameInput.value = "Ürün Adı Yok";
        }
    }
    function sendDemand() {
        document.getElementById("loadingOverlay").style.display = "block";

        var formData = new FormData();

        formData.append('DepartmentId', document.getElementById('department').value);
        formData.append('Description', document.getElementById('description').value);
        formData.append('DemandTitle', document.getElementById('demandtitle').value);
        formData.append('CompanyLocationId', document.getElementById('location').value);
        formData.append('LocationUnitId', document.getElementById('locationUnits').value);
        formData.append('RequirementDate', document.getElementById('requirementDate').value);

        var aa = document.getElementById('locationUnits').value;
        console.log(aa);


        var table = document.getElementById("dataTable");
        var rows = table.getElementsByTagName("tr");

        if (rows.length <= 1) {
            toastr.error("En az bir veri satırı eklenmelidir.", "Hata");
            return;
        }


        for (var i = 1; i < rows.length; i++) {
            var cells = rows[i].getElementsByTagName("td");
            var type = cells[0].querySelector("select[name='type[]']").value;
            var category = cells[1].querySelector("select[name='category[]']").value;
            var subcategory = cells[2].querySelector("select[name='subcategory[]']").value;
            // if (category.trim() !== "" && subcategory.trim() !== "") {
            //     formData.append('Category[]', category);
            //     formData.append('Subcategory[]', subcategory);
            // }

            var productName = cells[5].querySelector("input[name='productName[]']").value;
            var productCode = cells[4].querySelector("input[name='productCode[]']").value;
            var unit = cells[6].querySelector("select[name='unit[]']").value;
            var quantity = cells[7].querySelector("input[name='quantity[]']").value;
            console.log(type,category, subcategory, productName, productCode, unit, quantity);
            formData.append('Type[]', type);
            formData.append('Category[]', category);
            formData.append('Subcategory[]', subcategory);
            formData.append('Unit[]', unit);
            formData.append('Quantity[]', quantity);
            formData.append('ProductCode[]', productCode);
            formData.append('ProductName[]', productName);
        }
        var fileInputs = document.querySelectorAll('input[type="file"]');
        for (var i = 0; i < fileInputs.length; i++) {
            var fileInput = fileInputs[i];
            if (fileInput.files.length > 0) {
                for (var j = 0; j < fileInput.files.length; j++) {
                    formData.append('Files', fileInput.files[j]);
                    formData.append('FileNames', fileInput.files[j].name);
                }
            }
        }
        console.log("formdata", formData);
        $.ajax({
            url: '@Url.Action("AddDemand", "Demands")',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                console.log(result);
                toastr.success("Demand Created", "Success");
                location.reload();
            },
            error: function (error) {
                toastr.error("Unexpected Error", "Error");
            },
            complete: function () {
                document.getElementById("loadingOverlay").style.display = "none";
            }
        });
    }
</script>
@functions {
    string GetStatusClass(int status)
    {
        switch (status)
        {
            case 0: return "pending";
            case 1: return "cancelled";
            case 2: return "approved";
            default: return "";
        }
    }

    string GetStatusText(int status)
    {
        switch (status)
        {
            case 0: return "Beklemede";
            case 1: return "Reddedildi";
            case 2: return "Onaylandı";
            default: return "";
        }
    }
}