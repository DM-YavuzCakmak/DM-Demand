@using Demand.Domain.ViewModels
@using System.Security.Claims
@using System.Text.Json
@model List<DemandViewModel>

@{
    var claimsIdentity = (ClaimsIdentity)User.Identity;
    var claims = claimsIdentity.Claims;
    var userId = long.Parse(claims.FirstOrDefault(x => x.Type == "UserId").Value);

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="~/css/index.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <title>DEM MUSEUMS</title>
</head>

<body>
    <img id="logo" src="~/images/dem_logo.png" alt="Logo">
    <main class="table" id="demandTable">
        <section class="table__header">
            <h1>Talep Listesi</h1>
            <div class="input-group">
                <input type="search" id="searchInput" placeholder="Arama...">
                <img src="~/images/search.png" alt="">
            </div>
            <button class="create-demand-button" onclick="openCreateDemandPopup()">+ Talep Oluştur</button>
        </section>
        <section class="tableBody">
            <table>
                <thead>
                    <tr>
                        <th> Talep No <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Talep Başlığı <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Talep Eden <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Lokasyon <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Talep Tarihi <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Statü <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Aksiyon <span class="icon-arrow">&UpArrow;</span></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var demand in Model)
                    {
                        <tr>
                            <td>@demand.DemandId</td>
                            <td>@demand.DemandTitle</td>
                            <td>@demand.DemanderName</td>
                            <td>@demand.LocationName</td>
                            <td>@demand.DemandDate.ToString("dd.MM.yyyy")</td>
                            <td>
                                <p class="status @GetStatusClass((int)demand.Status)">@GetStatusText((int)demand.Status)</p>
                            </td>
                            <td>
                                @if (demand.CreatedAt == userId || userId == 7)
                                {
                                    <a href="@Url.Action("Edit", "Demands", new { id = demand.DemandId })" class="edit-button">Güncelle</a>
                                }
                                <a href="@Url.Action("Detail", "Demands", new { id = demand.DemandId })" class="view-button">Görüntüle</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    </main>
    <div id="overlay"></div>

    <div id="createDemandPopup" class="popup">
        <div class="popup-header">
            <h2>Talep Oluştur</h2>
        </div>
        <div class="popup-content" style="overflow-y: auto !important;">
            <div class="form-row">
                <div class="form-group">
                    <label for="demandtitle">Başlık:</label>
                    <input type="text" id="demandtitle" placeholder="Talep Başlığı" name="demandtitle" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="companyName">Şirket Adı:</label>
                    <select id="companyName" name="companyName">
                        <option value="Please Select Company">Lütfen şirket seçin...</option>
                        @foreach (var company in ViewBag.Companies)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="location">Lokasyon:</label>
                    <select id="location" name="location" onchange="updateLocationId()">
                    </select>
                    <input type="hidden" id="locationId" name="locationId" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="requestDate">Talep Tarihi:</label>
                    <input type="text" id="requestDate" name="requestDate" value="@DateTime.Now.ToShortDateString()" readonly>
                </div>

                <div class="form-group">
                    <label for="department">Departman:</label>
                    <select id="department" name="department">
                        <option value="Please Select department">Lütfen departman seçin..</option>
                        @foreach (var department in ViewBag.Department)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="description">Açıklama:</label>
                    <textarea id="description" name="description"></textarea>
                </div>
                <div class="form-group">
                    <label for="description">Dosya Seç:</label>
                    <input type="file" id="fileInput" name="fileInput" multiple accept=".png, .jpeg, .pdf" />
                </div>
            </div>
            <table id="dataTable">
                <thead>
                    <tr>
                        <th>Kategori</th>
                        <th>Alt Kategori</th>
                        <th>Ürün Açıklaması</th>
                        <th>Ürün Kodu</th>
                        <th>Ürün Adı</th>
                        <th>Birim</th>
                        <th>Adet</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <div class="select-wrapper">
                                <select name="category[]" class="category" onchange="updateSubcategories(this.parentNode.parentNode.parentNode)">
                                    @if (Model[0].NebimCategoryModels != null)
                                    {
                                        <option>Lütfen seçiniz</option>
                                        foreach (var product in Model[0].NebimCategoryModels)
                                        {
                                            <option value="@product.ProductHierarchyLevel01Code">@product.ProductHierarchyLevel01Description</option>
                                        }
                                    }
                                </select>
                            </div>
                        </td>
                        <td>
                            <div class="select-wrapper">
                                <select name="subcategory[]" class="subcategory" onchange="updateProduct(this.parentNode.parentNode.parentNode)">
                                </select>

                            </div>
                        </td>
                          <td class="form-group">
                            <div class="select-wrapper">
                                <select name="product[]" class="product" onchange="updateProductCode(this.parentNode.parentNode.parentNode)">
                                  
                                </select>
                            </div>
                        </td>
                        <td class="form-group">
                            <input type="text" name="productCode[]" class="productCode" />
                        </td>    
                        <td class="form-group">
                            <input type="text" name="productName[]" class="productName" />
                        </td>
                        <td>
                            <div class="select-wrapper">
                                <select name="unit[]" class="unit">
                                    <option value="1">Adet</option>
                                    <option value="2">Metre</option>
                                </select>
                            </div>
                        </td>
                        <td class="form-group">
                            <input type="text" name="quantity[]" class="quantity" />
                        </td>
                    </tr>
                </tbody>
            </table>
            <button id="addButton" type="button" onclick="addRow()">Satır Ekle</button>
            <button id="removeButton" type="button" onclick="removeRow()">Satır Sil</button>

            <div class="button-group">
                <button id="sendButton" type="button" onclick="sendDemand()">Oluştur</button>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/js/script.js"></script>
</body>

</html>
<style>
    #overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .create-demand-button {
        background-color: #3498db;
        color: #fff;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .create-demand-button:hover {
            background-color: #2980b9;
        }

    .edit-button {
        background-color: #ffcc80;
        color: black;
        font-weight: bold;
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
    }

        .edit-button:hover {
            background-color: #ffbb66;
            color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .view-button {
        background-color: #85a3ff;
        color: black;
        font-weight: bold;
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
    }

        .view-button:hover {
            background-color: #6b8cf9;
            color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .select-wrapper {
        position: relative;
        width: 150px;
        display: inline-block;
        margin-bottom: 10px;
    }

        .select-wrapper select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #fff;
            cursor: pointer;
        }

        .select-wrapper::after {
            content: "\25BC";
            font-size: 12px;
            color: #555;
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            pointer-events: none;
        }

        .select-wrapper ul {
            list-style: none;
            margin: 0;
            padding: 0;
            position: absolute;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1;
            top: 100%;
            left: 0;
            right: 0;
            display: none;
        }

        .select-wrapper.active ul {
            display: block;
        }

        .select-wrapper ul li {
            padding: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .select-wrapper ul li:hover {
                background-color: #f4f4f4;
            }

    #addButton, #removeButton {
        background-color: #4CAF50; /* Yeşil */
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px;
    }

        #addButton:hover, #removeButton:hover {
            background-color: #45a049; /* Koyu yeşil */
        }

    .popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px;
        width: 80%;
        height: 98%;
        border-radius: 15px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1001;
    }

    .popup-header h2 {
        margin: 0;
    }

    .file-group input[type="file"] {
        display: none;
    }

    .file-group label {
        background-color: #27ae60;
        color: #fff;
        font-weight: bold;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: inline-block;
    }

        .file-group label:hover {
            background-color: #218c53;
        }

    .file-group .file-name {
        margin-top: 10px;
        display: inline-block;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        max-width: 200px;
    }

    .file-group input[type="file"]:focus + label,
    .file-group input[type="file"]:not(:focus) + label {
        background-color: #27ae60;
    }

        .file-group input[type="file"]:focus + label:hover,
        .file-group input[type="file"]:not(:focus) + label:hover {
            background-color: #218c53;
        }

    .file-group input[type="file"] {
        opacity: 0;
        position: absolute;
        z-index: -1;
    }

        .file-group input[type="file"]:focus + label .file-name,
        .file-group input[type="file"]:not(:focus) + label .file-name {
            display: inline-block;
        }

        .file-group input[type="file"]:focus + label:before,
        .file-group input[type="file"]:not(:focus) + label:before {
            content: "Select File";
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

    #overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .popup .button-group {
        position: absolute;
        bottom: 10px;
        right: 10px;
    }

    .form-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .form-row2 {
        height: 100px;
        margin-top: -10px;
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        margin-top: -10px;
    }



    .button-group {
        width: 100%;
        text-align: right;
    }

    #description {
        height: 125px;
        width: 500px;
        resize: none;
    }

    #sendButton {
        background-color: #4CAF50;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .form-group {
        width: calc(50% - 10px);
        margin-bottom: 10px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group select,
        .form-group input[type="text"],
        .form-group textarea {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .form-group.file-group {
            width: calc(33.3333% - 10px);
        }
</style>

<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"> </script>
<script>
    $(document).ready(function () {
        $('#companyName').change(function () {
            var selectedCompanyId = $(this).val();
            $.ajax({
                url: '/api/CompanyLocations/GetLocations?companyId=' + selectedCompanyId,
                type: 'GET',
                success: function (data) {
                    $('#location').empty();
                    $.each(data.data, function (index, item) {
                        $('#location').append($('<option>', {
                            value: item.id,
                            text: item.name
                        }));
                    });
                },
                error: function (error) {
                    console.error('Error fetching locations:', error);
                }
            });
        });

        $('#searchInput').on('input', function () {
            var searchText = $(this).val().toLowerCase();

            $('tbody tr').each(function () {
                var rowText = $(this).text().toLowerCase();

                if (rowText.includes(searchText)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
    });
    function updateLocationId() {
        var locationId = $('#location').val();
        $('#locationId').val(locationId);
    }
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            closeCreateDemandPopup();
        }
    });
    function updateFileName(inputId) {
        var input = document.getElementById(inputId);
        var label = document.getElementById(inputId + 'Label');
        var fileName = document.getElementById(inputId + 'Name');

        if (input.files.length > 0) {
            fileName.textContent = input.files[0].name;
        } else {
            fileName.textContent = "";
        }
    }
    function openCreateDemandPopup() {
        var overlay = document.getElementById("overlay");
        var popup = document.getElementById("createDemandPopup");

        if (overlay && popup) {
            overlay.style.display = "block";
            popup.style.display = "block";

            overlay.addEventListener("click", function () {
                closeCreateDemandPopup();
            });
        }
    }
    function closeCreateDemandPopup() {
        var overlay = document.getElementById("overlay");
        var popup = document.getElementById("createDemandPopup");

        if (overlay && popup) {
            overlay.style.display = "none";
            popup.style.display = "none";
            overlay.removeEventListener("click", function () {
                closeCreateDemandPopup();
            });
        }
    }
    function addRow() {
        var table = document.getElementById("dataTable").getElementsByTagName('tbody')[0];
        var newRow = table.insertRow(table.rows.length);
        var cells = ['category', 'subcategory', 'product', 'productCode', 'productName', 'unit', 'quantity'];

        cells.forEach(function (cell) {
            var newCell = newRow.insertCell(-1);
            if (cell === 'category' || cell === 'subcategory' || cell === 'product' || cell === 'unit') {
                var div = document.createElement("div");
                div.className = "select-wrapper";
                var select = document.createElement("select");
                select.name = cell + "[]";
                select.className = cell;
                if (cell === 'unit') {
                    var option1 = document.createElement("option");
                    option1.text = "Adet";
                    option1.value = "1";
                    select.appendChild(option1);
                    var option2 = document.createElement("option");
                    option2.text = "Metre";
                    option2.value = "2";
                    select.appendChild(option2);

                } 
                else if (cell === 'category') {
                    select.addEventListener('change', function () {
                        updateSubcategories(this.parentNode.parentNode.parentNode);
                    });
                    var subCategoryModels = @Html.Raw(Json.Serialize(Model[0].NebimCategoryModels));
                    select.innerHTML = '';
                    var defaultOption = document.createElement('option');
                    defaultOption.text = "Lütfen seçiniz";
                    select.add(defaultOption);
                    subCategoryModels.forEach(function (subcategory) {
                      var option = document.createElement('option');
                      option.value = subcategory.productHierarchyLevel01Code;
                      option.textContent = subcategory.productHierarchyLevel01Description;
                      select.appendChild(option);
                    });
                } else if (cell === 'subcategory') {
                    select.addEventListener('change', function () {
                        updateProduct(this.parentNode.parentNode.parentNode);
                    });
                } else if (cell === 'product') {
                    select.addEventListener('change', function () {
                        updateProductCode(this.parentNode.parentNode.parentNode);
                    });
                }
                div.appendChild(select);
                newCell.appendChild(div);
            } else {
                var input = document.createElement("input");
                input.type = "text";
                input.name = cell +"[]";
                input.className = cell;
                
                newCell.className = "form-group";
                newCell.appendChild(input);
            }
        });
    }

    function removeRow() {
        var table = document.getElementById("dataTable").getElementsByTagName('tbody')[0];
        if (table.rows.length > 1) {
            table.deleteRow(-1);
        }
    }

    function updateSubcategories(parentNode) {
        debugger;
        var categoryValue = parentNode.querySelector('.category').value;
        var subcategorySelect = parentNode.querySelector('.subcategory');

        var subCategoryModels = @Html.Raw(Json.Serialize(Model[0].NebimSubCategoryModels));

        subcategorySelect.innerHTML = '';
        var defaultOption = document.createElement('option');
        defaultOption.text = "Lütfen seçiniz";
        subcategorySelect.add(defaultOption);
        subCategoryModels.forEach(function (subcategory) {
            if (subcategory.productHierarchyLevel01Code == categoryValue) {
                var option = document.createElement('option');
                option.value = subcategory.productHierarchyLevel02Code;
                option.textContent = subcategory.productHierarchyLevel02Description;
                subcategorySelect.appendChild(option);
            }
        });
    }
    function updateProduct(parentNode) {
        debugger;
        var subcategoryValue = parentNode.querySelector('.subcategory').value;
        var productSelect = parentNode.querySelector('.product');

        var productModels = @Html.Raw(Json.Serialize(Model[0].NebimProductModels));

        productSelect.innerHTML = '';
        var defaultOption = document.createElement('option');
        defaultOption.text = "Lütfen seçiniz";
        productSelect.add(defaultOption);
        productModels.forEach(function (product) {
            if (product.productHierarchyLevel02Code == subcategoryValue) {
                var option = document.createElement('option');
                option.value = product.productCode;
                option.textContent = product.productDescription;
                productSelect.appendChild(option);
            }
        });
    }
    function updateProductCode(parentNode) {
        var productSelect = parentNode.querySelector('.product');
        var productCodeInput = parentNode.querySelector('.productCode');
        var productNameInput = parentNode.querySelector('.productName');
        var productModels = @Html.Raw(Json.Serialize(Model[0].NebimProductModels));
        var selectedProductValue = productSelect.value;

        var foundProductCode = null;
        var foundProductName = null;
        productModels.forEach(function (product) {
            if (product.productCode == selectedProductValue) {
                foundProductCode = product.productCode;
                foundProductName = product.productDescription;
            }
        });
        if (foundProductCode) {
            productCodeInput.value = foundProductCode;
            productNameInput.value = foundProductName;
        } else {
            productCodeInput.value = "Ürün Kodu Yok";
            productNameInput.value = "Ürün Adı Yok";
        }
    }
    function sendDemand() {
        var formData = new FormData();

        formData.append('DepartmentId', document.getElementById('department').value);
        formData.append('Description', document.getElementById('description').value);
        formData.append('DemandTitle', document.getElementById('demandtitle').value);
        formData.append('CompanyLocationId', document.getElementById('location').value);

        var table = document.getElementById("dataTable");
        var rows = table.getElementsByTagName("tr");

        for (var i = 1; i < rows.length; i++) {
            var cells = rows[i].getElementsByTagName("td");
            var category = cells[0].querySelector("select[name='category[]']").value;
            var subcategory = cells[1].querySelector("select[name='subcategory[]']").value;
            var product = cells[2].querySelector("select[name='product[]']").selectedOptions[0].textContent;
            var productName = cells[4].querySelector("input[name='productName[]']").value;
            var productCode = cells[3].querySelector("input[name='productCode[]']").value;
            var unit = cells[5].querySelector("select[name='unit[]']").value;
            var quantity = cells[6].querySelector("input[name='quantity[]']").value;
            console.log(category, subcategory, product, productName, productCode, unit, quantity);
            formData.append('Category[]', category);
            formData.append('Subcategory[]', subcategory);
            formData.append('Unit[]', unit);
            formData.append('Quantity[]', quantity);
            formData.append('Product[]', product);
            formData.append('ProductCode[]', productCode);
            formData.append('ProductName[]', productName);
        }
        var fileInputs = document.querySelectorAll('input[type="file"]');
        for (var i = 0; i < fileInputs.length; i++) {
            var fileInput = fileInputs[i];
            if (fileInput.files.length > 0) {
                for (var j = 0; j < fileInput.files.length; j++) {
                    formData.append('Files', fileInput.files[j]);
                    formData.append('FileNames', fileInput.files[j].name);
                }
            }
        }
        console.log("formdata", formData);
        $.ajax({
            url: '@Url.Action("AddDemand", "Demands")',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                console.log(result);
                toastr.success("Demand Created", "Success");

                location.reload();
            },
            error: function (error) {
                toastr.error("Unexpected Error", "Error");
            }
        });
    }
</script>
@functions {
    string GetStatusClass(int status)
    {
        switch (status)
        {
            case 0: return "pending";
            case 1: return "cancelled";
            case 2: return "approved";
            default: return "";
        }
    }

    string GetStatusText(int status)
    {
        switch (status)
        {
            case 0: return "Beklemede";
            case 1: return "Reddedildi";
            case 2: return "Onaylandı";
            default: return "";
        }
    }
}